In archive libServo.a:

Servo.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ada  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00000000  00000000  00000b0e  2**0
                  ALLOC
  3 .stab         00000ba0  00000000  00000000  00000b10  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e4a  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZL7initISR18timer16_Sequence_t>:
}
#endif
#endif


static void initISR(timer16_Sequence_t timer)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	88 23       	and	r24, r24
  10:	01 f4       	brne	.+0      	; 0x12 <_ZL7initISR18timer16_Sequence_t+0x12>
    TCCR1A = 0;             // normal counting mode 
  12:	e0 e8       	ldi	r30, 0x80	; 128
  14:	f0 e0       	ldi	r31, 0x00	; 0
  16:	10 82       	st	Z, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
  18:	e1 e8       	ldi	r30, 0x81	; 129
  1a:	f0 e0       	ldi	r31, 0x00	; 0
  1c:	82 e0       	ldi	r24, 0x02	; 2
  1e:	80 83       	st	Z, r24
    TCNT1 = 0;              // clear the timer count 
  20:	e4 e8       	ldi	r30, 0x84	; 132
  22:	f0 e0       	ldi	r31, 0x00	; 0
  24:	11 82       	std	Z+1, r1	; 0x01
  26:	10 82       	st	Z, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
  28:	a6 e3       	ldi	r26, 0x36	; 54
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e6 e3       	ldi	r30, 0x36	; 54
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	80 81       	ld	r24, Z
  32:	82 60       	ori	r24, 0x02	; 2
  34:	8c 93       	st	X, r24
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
  36:	af e6       	ldi	r26, 0x6F	; 111
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	ef e6       	ldi	r30, 0x6F	; 111
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	80 81       	ld	r24, Z
  40:	82 60       	ori	r24, 0x02	; 2
  42:	8c 93       	st	X, r24
    TCNT5 = 0;              // clear the timer count 
    TIFR5 = _BV(OCF5A);     // clear any pending interrupts; 
    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt      
  }
#endif
} 
  44:	0f 90       	pop	r0
  46:	cf 91       	pop	r28
  48:	df 91       	pop	r29
  4a:	08 95       	ret

0000004c <_ZL6finISR18timer16_Sequence_t>:

static void finISR(timer16_Sequence_t timer)
  4c:	df 93       	push	r29
  4e:	cf 93       	push	r28
  50:	0f 92       	push	r0
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	89 83       	std	Y+1, r24	; 0x01
    timerDetach(TIMER3OUTCOMPAREA_INT);
  }
#else
    //For arduino - in future: call here to a currently undefined function to reset the timer
#endif
}
  58:	0f 90       	pop	r0
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

00000060 <_ZL13isTimerActive18timer16_Sequence_t>:

static boolean isTimerActive(timer16_Sequence_t timer)
  60:	df 93       	push	r29
  62:	cf 93       	push	r28
  64:	00 d0       	rcall	.+0      	; 0x66 <_ZL13isTimerActive18timer16_Sequence_t+0x6>
  66:	0f 92       	push	r0
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	8a 83       	std	Y+2, r24	; 0x02
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
  6e:	19 82       	std	Y+1, r1	; 0x01
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZL13isTimerActive18timer16_Sequence_t+0x12>
    if(SERVO(timer,channel).Pin.isActive == true)
  72:	8a 81       	ldd	r24, Y+2	; 0x02
  74:	28 2f       	mov	r18, r24
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	c9 01       	movw	r24, r18
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	82 0f       	add	r24, r18
  80:	93 1f       	adc	r25, r19
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	9c 01       	movw	r18, r24
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	88 2f       	mov	r24, r24
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	28 0f       	add	r18, r24
  94:	39 1f       	adc	r19, r25
  96:	c9 01       	movw	r24, r18
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	82 0f       	add	r24, r18
  9e:	93 1f       	adc	r25, r19
  a0:	fc 01       	movw	r30, r24
  a2:	e0 50       	subi	r30, 0x00	; 0
  a4:	f0 40       	sbci	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 95       	swap	r24
  aa:	86 95       	lsr	r24
  ac:	86 95       	lsr	r24
  ae:	83 70       	andi	r24, 0x03	; 3
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZL13isTimerActive18timer16_Sequence_t+0x56>
      return true;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8b 83       	std	Y+3, r24	; 0x03
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZL13isTimerActive18timer16_Sequence_t+0x5c>
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	8c 30       	cpi	r24, 0x0C	; 12
  c6:	00 f0       	brcs	.+0      	; 0xc8 <_ZL13isTimerActive18timer16_Sequence_t+0x68>
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
  }
  return false;
  c8:	1b 82       	std	Y+3, r1	; 0x03
  ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <_ZN5ServoC2Ev>:


/****************** end of static functions ******************************/

Servo::Servo()
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <_ZN5ServoC2Ev+0x6>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
{
  if( ServoCount < MAX_SERVOS) {
  e6:	80 91 00 00 	lds	r24, 0x0000
  ea:	8c 30       	cpi	r24, 0x0C	; 12
  ec:	00 f4       	brcc	.+0      	; 0xee <_ZN5ServoC2Ev+0x16>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
  ee:	80 91 00 00 	lds	r24, 0x0000
  f2:	e9 81       	ldd	r30, Y+1	; 0x01
  f4:	fa 81       	ldd	r31, Y+2	; 0x02
  f6:	80 83       	st	Z, r24
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 00 00 	sts	0x0000, r24
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	80 81       	ld	r24, Z
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	c9 01       	movw	r24, r18
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
 112:	fc 01       	movw	r30, r24
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	f0 40       	sbci	r31, 0x00	; 0
 118:	88 eb       	ldi	r24, 0xB8	; 184
 11a:	9b e0       	ldi	r25, 0x0B	; 11
 11c:	91 83       	std	Z+1, r25	; 0x01
 11e:	80 83       	st	Z, r24
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN5ServoC2Ev+0x4a>
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 83       	st	Z, r24
}
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <_ZN5ServoC1Ev+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	9a 83       	std	Y+2, r25	; 0x02
 140:	89 83       	std	Y+1, r24	; 0x01
{
  if( ServoCount < MAX_SERVOS) {
 142:	80 91 00 00 	lds	r24, 0x0000
 146:	8c 30       	cpi	r24, 0x0C	; 12
 148:	00 f4       	brcc	.+0      	; 0x14a <_ZN5ServoC1Ev+0x16>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
 14a:	80 91 00 00 	lds	r24, 0x0000
 14e:	e9 81       	ldd	r30, Y+1	; 0x01
 150:	fa 81       	ldd	r31, Y+2	; 0x02
 152:	80 83       	st	Z, r24
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 00 00 	sts	0x0000, r24
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
 15a:	e9 81       	ldd	r30, Y+1	; 0x01
 15c:	fa 81       	ldd	r31, Y+2	; 0x02
 15e:	80 81       	ld	r24, Z
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	c9 01       	movw	r24, r18
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	82 0f       	add	r24, r18
 16c:	93 1f       	adc	r25, r19
 16e:	fc 01       	movw	r30, r24
 170:	e0 50       	subi	r30, 0x00	; 0
 172:	f0 40       	sbci	r31, 0x00	; 0
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	91 83       	std	Z+1, r25	; 0x01
 17a:	80 83       	st	Z, r24
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN5ServoC1Ev+0x4a>
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
 17e:	e9 81       	ldd	r30, Y+1	; 0x01
 180:	fa 81       	ldd	r31, Y+2	; 0x02
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	80 83       	st	Z, r24
}
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <_ZN5Servo6detachEv>:
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
  } 
  return this->servoIndex ;
}

void Servo::detach()  
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	00 d0       	rcall	.+0      	; 0x196 <_ZN5Servo6detachEv+0x6>
 196:	00 d0       	rcall	.+0      	; 0x198 <_ZN5Servo6detachEv+0x8>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	9b 83       	std	Y+3, r25	; 0x03
 19e:	8a 83       	std	Y+2, r24	; 0x02
{
  servos[this->servoIndex].Pin.isActive = false;  
 1a0:	ea 81       	ldd	r30, Y+2	; 0x02
 1a2:	fb 81       	ldd	r31, Y+3	; 0x03
 1a4:	80 81       	ld	r24, Z
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	c9 01       	movw	r24, r18
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	82 0f       	add	r24, r18
 1b2:	93 1f       	adc	r25, r19
 1b4:	fc 01       	movw	r30, r24
 1b6:	e0 50       	subi	r30, 0x00	; 0
 1b8:	f0 40       	sbci	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	80 83       	st	Z, r24
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
 1c0:	ea 81       	ldd	r30, Y+2	; 0x02
 1c2:	fb 81       	ldd	r31, Y+3	; 0x03
 1c4:	80 81       	ld	r24, Z
 1c6:	9c e0       	ldi	r25, 0x0C	; 12
 1c8:	69 2f       	mov	r22, r25
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 1ce:	89 83       	std	Y+1, r24	; 0x01
  if(isTimerActive(timer) == false) {
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 1d6:	1c 82       	std	Y+4, r1	; 0x04
 1d8:	88 23       	and	r24, r24
 1da:	01 f4       	brne	.+0      	; 0x1dc <_ZN5Servo6detachEv+0x4c>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8c 83       	std	Y+4, r24	; 0x04
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	88 23       	and	r24, r24
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <_ZN5Servo6detachEv+0x56>
    finISR(timer);
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
  }
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <_ZN5Servo17writeMicrosecondsEi+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <_ZN5Servo17writeMicrosecondsEi+0x8>
 202:	00 d0       	rcall	.+0      	; 0x204 <_ZN5Servo17writeMicrosecondsEi+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03
 20c:	7e 83       	std	Y+6, r23	; 0x06
 20e:	6d 83       	std	Y+5, r22	; 0x05
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
 210:	eb 81       	ldd	r30, Y+3	; 0x03
 212:	fc 81       	ldd	r31, Y+4	; 0x04
 214:	80 81       	ld	r24, Z
 216:	8a 83       	std	Y+2, r24	; 0x02
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	8c 30       	cpi	r24, 0x0C	; 12
 21c:	00 f0       	brcs	.+0      	; 0x21e <_ZN5Servo17writeMicrosecondsEi+0x24>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN5Servo17writeMicrosecondsEi+0x26>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
 220:	eb 81       	ldd	r30, Y+3	; 0x03
 222:	fc 81       	ldd	r31, Y+4	; 0x04
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	28 2f       	mov	r18, r24
 228:	33 27       	eor	r19, r19
 22a:	27 fd       	sbrc	r18, 7
 22c:	30 95       	com	r19
 22e:	88 e8       	ldi	r24, 0x88	; 136
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	82 1b       	sub	r24, r18
 234:	93 0b       	sbc	r25, r19
 236:	9c 01       	movw	r18, r24
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	9e 81       	ldd	r25, Y+6	; 0x06
 244:	82 17       	cp	r24, r18
 246:	93 07       	cpc	r25, r19
 248:	04 f4       	brge	.+0      	; 0x24a <_ZN5Servo17writeMicrosecondsEi+0x50>
      value = SERVO_MIN();
 24a:	eb 81       	ldd	r30, Y+3	; 0x03
 24c:	fc 81       	ldd	r31, Y+4	; 0x04
 24e:	81 81       	ldd	r24, Z+1	; 0x01
 250:	28 2f       	mov	r18, r24
 252:	33 27       	eor	r19, r19
 254:	27 fd       	sbrc	r18, 7
 256:	30 95       	com	r19
 258:	88 e8       	ldi	r24, 0x88	; 136
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	82 1b       	sub	r24, r18
 25e:	93 0b       	sbc	r25, r19
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	9e 83       	std	Y+6, r25	; 0x06
 26a:	8d 83       	std	Y+5, r24	; 0x05
 26c:	00 c0       	rjmp	.+0      	; 0x26e <_ZN5Servo17writeMicrosecondsEi+0x74>
    else if( value > SERVO_MAX() )
 26e:	eb 81       	ldd	r30, Y+3	; 0x03
 270:	fc 81       	ldd	r31, Y+4	; 0x04
 272:	82 81       	ldd	r24, Z+2	; 0x02
 274:	28 2f       	mov	r18, r24
 276:	33 27       	eor	r19, r19
 278:	27 fd       	sbrc	r18, 7
 27a:	30 95       	com	r19
 27c:	88 e5       	ldi	r24, 0x58	; 88
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	82 1b       	sub	r24, r18
 282:	93 0b       	sbc	r25, r19
 284:	9c 01       	movw	r18, r24
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	28 17       	cp	r18, r24
 294:	39 07       	cpc	r19, r25
 296:	04 f4       	brge	.+0      	; 0x298 <_ZN5Servo17writeMicrosecondsEi+0x9e>
      value = SERVO_MAX();   
 298:	eb 81       	ldd	r30, Y+3	; 0x03
 29a:	fc 81       	ldd	r31, Y+4	; 0x04
 29c:	82 81       	ldd	r24, Z+2	; 0x02
 29e:	28 2f       	mov	r18, r24
 2a0:	33 27       	eor	r19, r19
 2a2:	27 fd       	sbrc	r18, 7
 2a4:	30 95       	com	r19
 2a6:	88 e5       	ldi	r24, 0x58	; 88
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	82 1b       	sub	r24, r18
 2ac:	93 0b       	sbc	r25, r19
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	9e 83       	std	Y+6, r25	; 0x06
 2b8:	8d 83       	std	Y+5, r24	; 0x05
    
  	value = value - TRIM_DURATION;
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
 2bc:	9e 81       	ldd	r25, Y+6	; 0x06
 2be:	02 97       	sbiw	r24, 0x02	; 2
 2c0:	9e 83       	std	Y+6, r25	; 0x06
 2c2:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
 2c6:	9e 81       	ldd	r25, Y+6	; 0x06
 2c8:	aa 27       	eor	r26, r26
 2ca:	97 fd       	sbrc	r25, 7
 2cc:	a0 95       	com	r26
 2ce:	ba 2f       	mov	r27, r26
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 1f       	adc	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	68 94       	set
 2f2:	12 f8       	bld	r1, 2
 2f4:	b6 95       	lsr	r27
 2f6:	a7 95       	ror	r26
 2f8:	97 95       	ror	r25
 2fa:	87 95       	ror	r24
 2fc:	16 94       	lsr	r1
 2fe:	01 f4       	brne	.+0      	; 0x300 <_ZN5Servo17writeMicrosecondsEi+0x106>
 300:	9e 83       	std	Y+6, r25	; 0x06
 302:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
 304:	ef e5       	ldi	r30, 0x5F	; 95
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	89 83       	std	Y+1, r24	; 0x01
    cli();
 30c:	f8 94       	cli
    servos[channel].ticks = value;  
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	4d 81       	ldd	r20, Y+5	; 0x05
 316:	5e 81       	ldd	r21, Y+6	; 0x06
 318:	c9 01       	movw	r24, r18
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	fc 01       	movw	r30, r24
 324:	e0 50       	subi	r30, 0x00	; 0
 326:	f0 40       	sbci	r31, 0x00	; 0
 328:	51 83       	std	Z+1, r21	; 0x01
 32a:	40 83       	st	Z, r20
    SREG = oldSREG;   
 32c:	ef e5       	ldi	r30, 0x5F	; 95
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	80 83       	st	Z, r24
  } 
}
 334:	26 96       	adiw	r28, 0x06	; 6
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	08 95       	ret

00000346 <_ZN5Servo16readMicrosecondsEv>:
int Servo::read() // return the value as degrees
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
}

int Servo::readMicroseconds()
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	00 d0       	rcall	.+0      	; 0x34c <_ZN5Servo16readMicrosecondsEv+0x6>
 34c:	00 d0       	rcall	.+0      	; 0x34e <_ZN5Servo16readMicrosecondsEv+0x8>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	9c 83       	std	Y+4, r25	; 0x04
 354:	8b 83       	std	Y+3, r24	; 0x03
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
 356:	eb 81       	ldd	r30, Y+3	; 0x03
 358:	fc 81       	ldd	r31, Y+4	; 0x04
 35a:	80 81       	ld	r24, Z
 35c:	8f 3f       	cpi	r24, 0xFF	; 255
 35e:	01 f0       	breq	.+0      	; 0x360 <_ZN5Servo16readMicrosecondsEv+0x1a>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
 360:	eb 81       	ldd	r30, Y+3	; 0x03
 362:	fc 81       	ldd	r31, Y+4	; 0x04
 364:	80 81       	ld	r24, Z
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	c9 01       	movw	r24, r18
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	82 0f       	add	r24, r18
 372:	93 1f       	adc	r25, r19
 374:	fc 01       	movw	r30, r24
 376:	e0 50       	subi	r30, 0x00	; 0
 378:	f0 40       	sbci	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	92 95       	swap	r25
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	89 27       	eor	r24, r25
 392:	9f 70       	andi	r25, 0x0F	; 15
 394:	89 27       	eor	r24, r25
 396:	02 96       	adiw	r24, 0x02	; 2
 398:	9a 83       	std	Y+2, r25	; 0x02
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	00 c0       	rjmp	.+0      	; 0x39e <_ZN5Servo16readMicrosecondsEv+0x58>
  else 
    pulsewidth  = 0;
 39e:	1a 82       	std	Y+2, r1	; 0x02
 3a0:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;   
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	cf 91       	pop	r28
 3b0:	df 91       	pop	r29
 3b2:	08 95       	ret

000003b4 <_ZN5Servo8attachedEv>:

bool Servo::attached()
 3b4:	df 93       	push	r29
 3b6:	cf 93       	push	r28
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <_ZN5Servo8attachedEv+0x6>
 3ba:	0f 92       	push	r0
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
{
  return servos[this->servoIndex].Pin.isActive ;
 3c4:	e9 81       	ldd	r30, Y+1	; 0x01
 3c6:	fa 81       	ldd	r31, Y+2	; 0x02
 3c8:	80 81       	ld	r24, Z
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	82 0f       	add	r24, r18
 3d6:	93 1f       	adc	r25, r19
 3d8:	fc 01       	movw	r30, r24
 3da:	e0 50       	subi	r30, 0x00	; 0
 3dc:	f0 40       	sbci	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	82 95       	swap	r24
 3e2:	86 95       	lsr	r24
 3e4:	86 95       	lsr	r24
 3e6:	83 70       	andi	r24, 0x03	; 3
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	8b 83       	std	Y+3, r24	; 0x03
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	88 23       	and	r24, r24
 3f0:	01 f0       	breq	.+0      	; 0x3f2 <_ZN5Servo8attachedEv+0x3e>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	8b 83       	std	Y+3, r24	; 0x03
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <_ZN5Servo4readEv>:
    servos[channel].ticks = value;  
    SREG = oldSREG;   
  } 
}

int Servo::read() // return the value as degrees
 404:	af 92       	push	r10
 406:	bf 92       	push	r11
 408:	cf 92       	push	r12
 40a:	df 92       	push	r13
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	00 d0       	rcall	.+0      	; 0x41a <_ZN5Servo4readEv+0x16>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	9a 83       	std	Y+2, r25	; 0x02
 420:	89 83       	std	Y+1, r24	; 0x01
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	ac 01       	movw	r20, r24
 42e:	66 27       	eor	r22, r22
 430:	57 fd       	sbrc	r21, 7
 432:	60 95       	com	r22
 434:	76 2f       	mov	r23, r22
 436:	e9 81       	ldd	r30, Y+1	; 0x01
 438:	fa 81       	ldd	r31, Y+2	; 0x02
 43a:	81 81       	ldd	r24, Z+1	; 0x01
 43c:	28 2f       	mov	r18, r24
 43e:	33 27       	eor	r19, r19
 440:	27 fd       	sbrc	r18, 7
 442:	30 95       	com	r19
 444:	88 e8       	ldi	r24, 0x88	; 136
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	82 1b       	sub	r24, r18
 44a:	93 0b       	sbc	r25, r19
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	5c 01       	movw	r10, r24
 456:	cc 24       	eor	r12, r12
 458:	b7 fc       	sbrc	r11, 7
 45a:	c0 94       	com	r12
 45c:	dc 2c       	mov	r13, r12
 45e:	e9 81       	ldd	r30, Y+1	; 0x01
 460:	fa 81       	ldd	r31, Y+2	; 0x02
 462:	82 81       	ldd	r24, Z+2	; 0x02
 464:	28 2f       	mov	r18, r24
 466:	33 27       	eor	r19, r19
 468:	27 fd       	sbrc	r18, 7
 46a:	30 95       	com	r19
 46c:	88 e5       	ldi	r24, 0x58	; 88
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	82 1b       	sub	r24, r18
 472:	93 0b       	sbc	r25, r19
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	7c 01       	movw	r14, r24
 47e:	00 27       	eor	r16, r16
 480:	f7 fc       	sbrc	r15, 7
 482:	00 95       	com	r16
 484:	10 2f       	mov	r17, r16
 486:	00 d0       	rcall	.+0      	; 0x488 <_ZN5Servo4readEv+0x84>
 488:	00 d0       	rcall	.+0      	; 0x48a <_ZN5Servo4readEv+0x86>
 48a:	ed b7       	in	r30, 0x3d	; 61
 48c:	fe b7       	in	r31, 0x3e	; 62
 48e:	31 96       	adiw	r30, 0x01	; 1
 490:	84 eb       	ldi	r24, 0xB4	; 180
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	a0 e0       	ldi	r26, 0x00	; 0
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	80 83       	st	Z, r24
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	a2 83       	std	Z+2, r26	; 0x02
 49e:	b3 83       	std	Z+3, r27	; 0x03
 4a0:	cb 01       	movw	r24, r22
 4a2:	ba 01       	movw	r22, r20
 4a4:	a6 01       	movw	r20, r12
 4a6:	95 01       	movw	r18, r10
 4a8:	aa 24       	eor	r10, r10
 4aa:	bb 24       	eor	r11, r11
 4ac:	65 01       	movw	r12, r10
 4ae:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
}
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	cf 91       	pop	r28
 4c4:	df 91       	pop	r29
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	08 95       	ret

000004d8 <_ZN5Servo5writeEi>:
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <_ZN5Servo5writeEi+0x16>
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <_ZN5Servo5writeEi+0x18>
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	9a 83       	std	Y+2, r25	; 0x02
 4f6:	89 83       	std	Y+1, r24	; 0x01
 4f8:	7c 83       	std	Y+4, r23	; 0x04
 4fa:	6b 83       	std	Y+3, r22	; 0x03
{  
  if(value < MIN_PULSE_WIDTH)
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	9c 81       	ldd	r25, Y+4	; 0x04
 500:	22 e0       	ldi	r18, 0x02	; 2
 502:	80 32       	cpi	r24, 0x20	; 32
 504:	92 07       	cpc	r25, r18
 506:	04 f0       	brlt	.+0      	; 0x508 <_ZN5Servo5writeEi+0x30>
 508:	00 c0       	rjmp	.+0      	; 0x50a <_ZN5Servo5writeEi+0x32>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	9c 81       	ldd	r25, Y+4	; 0x04
 50e:	99 23       	and	r25, r25
 510:	04 f4       	brge	.+0      	; 0x512 <_ZN5Servo5writeEi+0x3a>
 512:	1c 82       	std	Y+4, r1	; 0x04
 514:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	9c 81       	ldd	r25, Y+4	; 0x04
 51a:	85 3b       	cpi	r24, 0xB5	; 181
 51c:	91 05       	cpc	r25, r1
 51e:	04 f0       	brlt	.+0      	; 0x520 <_ZN5Servo5writeEi+0x48>
 520:	84 eb       	ldi	r24, 0xB4	; 180
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	9c 83       	std	Y+4, r25	; 0x04
 526:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	9c 81       	ldd	r25, Y+4	; 0x04
 52c:	ac 01       	movw	r20, r24
 52e:	66 27       	eor	r22, r22
 530:	57 fd       	sbrc	r21, 7
 532:	60 95       	com	r22
 534:	76 2f       	mov	r23, r22
 536:	e9 81       	ldd	r30, Y+1	; 0x01
 538:	fa 81       	ldd	r31, Y+2	; 0x02
 53a:	81 81       	ldd	r24, Z+1	; 0x01
 53c:	28 2f       	mov	r18, r24
 53e:	33 27       	eor	r19, r19
 540:	27 fd       	sbrc	r18, 7
 542:	30 95       	com	r19
 544:	88 e8       	ldi	r24, 0x88	; 136
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	82 1b       	sub	r24, r18
 54a:	93 0b       	sbc	r25, r19
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	5c 01       	movw	r10, r24
 556:	cc 24       	eor	r12, r12
 558:	b7 fc       	sbrc	r11, 7
 55a:	c0 94       	com	r12
 55c:	dc 2c       	mov	r13, r12
 55e:	e9 81       	ldd	r30, Y+1	; 0x01
 560:	fa 81       	ldd	r31, Y+2	; 0x02
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	28 2f       	mov	r18, r24
 566:	33 27       	eor	r19, r19
 568:	27 fd       	sbrc	r18, 7
 56a:	30 95       	com	r19
 56c:	88 e5       	ldi	r24, 0x58	; 88
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	82 1b       	sub	r24, r18
 572:	93 0b       	sbc	r25, r19
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	aa 27       	eor	r26, r26
 57e:	97 fd       	sbrc	r25, 7
 580:	a0 95       	com	r26
 582:	ba 2f       	mov	r27, r26
 584:	00 d0       	rcall	.+0      	; 0x586 <_ZN5Servo5writeEi+0xae>
 586:	00 d0       	rcall	.+0      	; 0x588 <_ZN5Servo5writeEi+0xb0>
 588:	ed b7       	in	r30, 0x3d	; 61
 58a:	fe b7       	in	r31, 0x3e	; 62
 58c:	31 96       	adiw	r30, 0x01	; 1
 58e:	80 83       	st	Z, r24
 590:	91 83       	std	Z+1, r25	; 0x01
 592:	a2 83       	std	Z+2, r26	; 0x02
 594:	b3 83       	std	Z+3, r27	; 0x03
 596:	cb 01       	movw	r24, r22
 598:	ba 01       	movw	r22, r20
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	0f 2e       	mov	r0, r31
 5a4:	f4 eb       	ldi	r31, 0xB4	; 180
 5a6:	ef 2e       	mov	r14, r31
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ff 2e       	mov	r15, r31
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	0f 2f       	mov	r16, r31
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	1f 2f       	mov	r17, r31
 5b4:	f0 2d       	mov	r31, r0
 5b6:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	dc 01       	movw	r26, r24
 5c4:	cb 01       	movw	r24, r22
 5c6:	9c 83       	std	Y+4, r25	; 0x04
 5c8:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	9a 81       	ldd	r25, Y+2	; 0x02
 5ce:	2b 81       	ldd	r18, Y+3	; 0x03
 5d0:	3c 81       	ldd	r19, Y+4	; 0x04
 5d2:	b9 01       	movw	r22, r18
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
}
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	bf 90       	pop	r11
 5f2:	af 90       	pop	r10
 5f4:	08 95       	ret

000005f6 <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	2e 97       	sbiw	r28, 0x0e	; 14
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	9b 83       	std	Y+3, r25	; 0x03
 60c:	8a 83       	std	Y+2, r24	; 0x02
 60e:	7d 83       	std	Y+5, r23	; 0x05
 610:	6c 83       	std	Y+4, r22	; 0x04
 612:	5f 83       	std	Y+7, r21	; 0x07
 614:	4e 83       	std	Y+6, r20	; 0x06
 616:	39 87       	std	Y+9, r19	; 0x09
 618:	28 87       	std	Y+8, r18	; 0x08
{
  if(this->servoIndex < MAX_SERVOS ) {
 61a:	ea 81       	ldd	r30, Y+2	; 0x02
 61c:	fb 81       	ldd	r31, Y+3	; 0x03
 61e:	80 81       	ld	r24, Z
 620:	8c 30       	cpi	r24, 0x0C	; 12
 622:	00 f0       	brcs	.+0      	; 0x624 <_ZN5Servo6attachEiii+0x2e>
 624:	00 c0       	rjmp	.+0      	; 0x626 <_ZN5Servo6attachEiii+0x30>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
 626:	8c 81       	ldd	r24, Y+4	; 0x04
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
    servos[this->servoIndex].Pin.nbr = pin;  
 62e:	ea 81       	ldd	r30, Y+2	; 0x02
 630:	fb 81       	ldd	r31, Y+3	; 0x03
 632:	80 81       	ld	r24, Z
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	48 2f       	mov	r20, r24
 63c:	4f 73       	andi	r20, 0x3F	; 63
 63e:	c9 01       	movw	r24, r18
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	82 0f       	add	r24, r18
 646:	93 1f       	adc	r25, r19
 648:	fc 01       	movw	r30, r24
 64a:	e0 50       	subi	r30, 0x00	; 0
 64c:	f0 40       	sbci	r31, 0x00	; 0
 64e:	94 2f       	mov	r25, r20
 650:	9f 73       	andi	r25, 0x3F	; 63
 652:	80 81       	ld	r24, Z
 654:	80 7c       	andi	r24, 0xC0	; 192
 656:	89 2b       	or	r24, r25
 658:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
 65a:	20 e2       	ldi	r18, 0x20	; 32
 65c:	32 e0       	ldi	r19, 0x02	; 2
 65e:	8e 81       	ldd	r24, Y+6	; 0x06
 660:	9f 81       	ldd	r25, Y+7	; 0x07
 662:	a9 01       	movw	r20, r18
 664:	48 1b       	sub	r20, r24
 666:	59 0b       	sbc	r21, r25
 668:	ca 01       	movw	r24, r20
 66a:	9c 87       	std	Y+12, r25	; 0x0c
 66c:	8b 87       	std	Y+11, r24	; 0x0b
 66e:	8b 85       	ldd	r24, Y+11	; 0x0b
 670:	9c 85       	ldd	r25, Y+12	; 0x0c
 672:	99 23       	and	r25, r25
 674:	04 f4       	brge	.+0      	; 0x676 <_ZN5Servo6attachEiii+0x80>
 676:	4b 85       	ldd	r20, Y+11	; 0x0b
 678:	5c 85       	ldd	r21, Y+12	; 0x0c
 67a:	4d 5f       	subi	r20, 0xFD	; 253
 67c:	5f 4f       	sbci	r21, 0xFF	; 255
 67e:	5c 87       	std	Y+12, r21	; 0x0c
 680:	4b 87       	std	Y+11, r20	; 0x0b
 682:	8b 85       	ldd	r24, Y+11	; 0x0b
 684:	9c 85       	ldd	r25, Y+12	; 0x0c
 686:	95 95       	asr	r25
 688:	87 95       	ror	r24
 68a:	95 95       	asr	r25
 68c:	87 95       	ror	r24
 68e:	ea 81       	ldd	r30, Y+2	; 0x02
 690:	fb 81       	ldd	r31, Y+3	; 0x03
 692:	81 83       	std	Z+1, r24	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
 694:	20 e6       	ldi	r18, 0x60	; 96
 696:	39 e0       	ldi	r19, 0x09	; 9
 698:	88 85       	ldd	r24, Y+8	; 0x08
 69a:	99 85       	ldd	r25, Y+9	; 0x09
 69c:	a9 01       	movw	r20, r18
 69e:	48 1b       	sub	r20, r24
 6a0:	59 0b       	sbc	r21, r25
 6a2:	ca 01       	movw	r24, r20
 6a4:	9e 87       	std	Y+14, r25	; 0x0e
 6a6:	8d 87       	std	Y+13, r24	; 0x0d
 6a8:	8d 85       	ldd	r24, Y+13	; 0x0d
 6aa:	9e 85       	ldd	r25, Y+14	; 0x0e
 6ac:	99 23       	and	r25, r25
 6ae:	04 f4       	brge	.+0      	; 0x6b0 <_ZN5Servo6attachEiii+0xba>
 6b0:	4d 85       	ldd	r20, Y+13	; 0x0d
 6b2:	5e 85       	ldd	r21, Y+14	; 0x0e
 6b4:	4d 5f       	subi	r20, 0xFD	; 253
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255
 6b8:	5e 87       	std	Y+14, r21	; 0x0e
 6ba:	4d 87       	std	Y+13, r20	; 0x0d
 6bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 6be:	9e 85       	ldd	r25, Y+14	; 0x0e
 6c0:	95 95       	asr	r25
 6c2:	87 95       	ror	r24
 6c4:	95 95       	asr	r25
 6c6:	87 95       	ror	r24
 6c8:	ea 81       	ldd	r30, Y+2	; 0x02
 6ca:	fb 81       	ldd	r31, Y+3	; 0x03
 6cc:	82 83       	std	Z+2, r24	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
 6ce:	ea 81       	ldd	r30, Y+2	; 0x02
 6d0:	fb 81       	ldd	r31, Y+3	; 0x03
 6d2:	80 81       	ld	r24, Z
 6d4:	9c e0       	ldi	r25, 0x0C	; 12
 6d6:	69 2f       	mov	r22, r25
 6d8:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 6dc:	89 83       	std	Y+1, r24	; 0x01
    if(isTimerActive(timer) == false)
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 6e4:	1a 86       	std	Y+10, r1	; 0x0a
 6e6:	88 23       	and	r24, r24
 6e8:	01 f4       	brne	.+0      	; 0x6ea <_ZN5Servo6attachEiii+0xf4>
 6ea:	51 e0       	ldi	r21, 0x01	; 1
 6ec:	5a 87       	std	Y+10, r21	; 0x0a
 6ee:	8a 85       	ldd	r24, Y+10	; 0x0a
 6f0:	88 23       	and	r24, r24
 6f2:	01 f0       	breq	.+0      	; 0x6f4 <_ZN5Servo6attachEiii+0xfe>
      initISR(timer);    
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
 6fa:	ea 81       	ldd	r30, Y+2	; 0x02
 6fc:	fb 81       	ldd	r31, Y+3	; 0x03
 6fe:	80 81       	ld	r24, Z
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	c9 01       	movw	r24, r18
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	82 0f       	add	r24, r18
 70c:	93 1f       	adc	r25, r19
 70e:	fc 01       	movw	r30, r24
 710:	e0 50       	subi	r30, 0x00	; 0
 712:	f0 40       	sbci	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	80 64       	ori	r24, 0x40	; 64
 718:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
 71a:	ea 81       	ldd	r30, Y+2	; 0x02
 71c:	fb 81       	ldd	r31, Y+3	; 0x03
 71e:	80 81       	ld	r24, Z
}
 720:	2e 96       	adiw	r28, 0x0e	; 14
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <_ZN5Servo6attachEi>:
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
 732:	df 93       	push	r29
 734:	cf 93       	push	r28
 736:	00 d0       	rcall	.+0      	; 0x738 <_ZN5Servo6attachEi+0x6>
 738:	00 d0       	rcall	.+0      	; 0x73a <_ZN5Servo6attachEi+0x8>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	9a 83       	std	Y+2, r25	; 0x02
 740:	89 83       	std	Y+1, r24	; 0x01
 742:	7c 83       	std	Y+4, r23	; 0x04
 744:	6b 83       	std	Y+3, r22	; 0x03
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	9a 81       	ldd	r25, Y+2	; 0x02
 74a:	2b 81       	ldd	r18, Y+3	; 0x03
 74c:	3c 81       	ldd	r19, Y+4	; 0x04
 74e:	b9 01       	movw	r22, r18
 750:	40 e2       	ldi	r20, 0x20	; 32
 752:	52 e0       	ldi	r21, 0x02	; 2
 754:	20 e6       	ldi	r18, 0x60	; 96
 756:	39 e0       	ldi	r19, 0x09	; 9
 758:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MIN() (MIN_PULSE_WIDTH - this->min * 4)  // minimum value in uS for this servo
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo 

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	2a 97       	sbiw	r28, 0x0a	; 10
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	7b 83       	std	Y+3, r23	; 0x03
 782:	6a 83       	std	Y+2, r22	; 0x02
 784:	5d 83       	std	Y+5, r21	; 0x05
 786:	4c 83       	std	Y+4, r20	; 0x04
{
  if( Channel[timer] < 0 )
 788:	89 81       	ldd	r24, Y+1	; 0x01
 78a:	88 2f       	mov	r24, r24
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	e0 50       	subi	r30, 0x00	; 0
 792:	f0 40       	sbci	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	1a 86       	std	Y+10, r1	; 0x0a
 798:	88 23       	and	r24, r24
 79a:	04 f4       	brge	.+0      	; 0x79c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x32>
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	2a 87       	std	Y+10, r18	; 0x0a
 7a0:	8a 85       	ldd	r24, Y+10	; 0x0a
 7a2:	88 23       	and	r24, r24
 7a4:	01 f0       	breq	.+0      	; 0x7a6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
 7a6:	ea 81       	ldd	r30, Y+2	; 0x02
 7a8:	fb 81       	ldd	r31, Y+3	; 0x03
 7aa:	11 82       	std	Z+1, r1	; 0x01
 7ac:	10 82       	st	Z, r1
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x46>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	c9 01       	movw	r24, r18
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	82 0f       	add	r24, r18
 7be:	93 1f       	adc	r25, r19
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	9c 01       	movw	r18, r24
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	88 2f       	mov	r24, r24
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	fc 01       	movw	r30, r24
 7d2:	e0 50       	subi	r30, 0x00	; 0
 7d4:	f0 40       	sbci	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	99 27       	eor	r25, r25
 7da:	87 fd       	sbrc	r24, 7
 7dc:	90 95       	com	r25
 7de:	28 0f       	add	r18, r24
 7e0:	39 1f       	adc	r19, r25
 7e2:	80 91 00 00 	lds	r24, 0x0000
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	04 f4       	brge	.+0      	; 0x7f0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x86>
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	c9 01       	movw	r24, r18
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	82 0f       	add	r24, r18
 7fe:	93 1f       	adc	r25, r19
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	9c 01       	movw	r18, r24
 80a:	89 81       	ldd	r24, Y+1	; 0x01
 80c:	88 2f       	mov	r24, r24
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	fc 01       	movw	r30, r24
 812:	e0 50       	subi	r30, 0x00	; 0
 814:	f0 40       	sbci	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	99 27       	eor	r25, r25
 81a:	87 fd       	sbrc	r24, 7
 81c:	90 95       	com	r25
 81e:	28 0f       	add	r18, r24
 820:	39 1f       	adc	r19, r25
 822:	c9 01       	movw	r24, r18
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	82 0f       	add	r24, r18
 82a:	93 1f       	adc	r25, r19
 82c:	fc 01       	movw	r30, r24
 82e:	e0 50       	subi	r30, 0x00	; 0
 830:	f0 40       	sbci	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	82 95       	swap	r24
 836:	86 95       	lsr	r24
 838:	86 95       	lsr	r24
 83a:	83 70       	andi	r24, 0x03	; 3
 83c:	81 70       	andi	r24, 0x01	; 1
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	01 f4       	brne	.+0      	; 0x842 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd8>
 842:	21 e0       	ldi	r18, 0x01	; 1
 844:	29 87       	std	Y+9, r18	; 0x09
 846:	00 c0       	rjmp	.+0      	; 0x848 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
 848:	19 86       	std	Y+9, r1	; 0x09
 84a:	89 85       	ldd	r24, Y+9	; 0x09
 84c:	88 23       	and	r24, r24
 84e:	01 f0       	breq	.+0      	; 0x850 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	28 2f       	mov	r18, r24
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	c9 01       	movw	r24, r18
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	9c 01       	movw	r18, r24
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	88 2f       	mov	r24, r24
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	e0 50       	subi	r30, 0x00	; 0
 874:	f0 40       	sbci	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	99 27       	eor	r25, r25
 87a:	87 fd       	sbrc	r24, 7
 87c:	90 95       	com	r25
 87e:	28 0f       	add	r18, r24
 880:	39 1f       	adc	r19, r25
 882:	c9 01       	movw	r24, r18
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	82 0f       	add	r24, r18
 88a:	93 1f       	adc	r25, r19
 88c:	fc 01       	movw	r30, r24
 88e:	e0 50       	subi	r30, 0x00	; 0
 890:	f0 40       	sbci	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	8f 73       	andi	r24, 0x3F	; 63
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
  }

  Channel[timer]++;    // increment to the next channel
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	28 2f       	mov	r18, r24
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	f9 01       	movw	r30, r18
 8a4:	e0 50       	subi	r30, 0x00	; 0
 8a6:	f0 40       	sbci	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	8f 5f       	subi	r24, 0xFF	; 255
 8ac:	f9 01       	movw	r30, r18
 8ae:	e0 50       	subi	r30, 0x00	; 0
 8b0:	f0 40       	sbci	r31, 0x00	; 0
 8b2:	80 83       	st	Z, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
 8b4:	89 81       	ldd	r24, Y+1	; 0x01
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	c9 01       	movw	r24, r18
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	82 0f       	add	r24, r18
 8c2:	93 1f       	adc	r25, r19
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	9c 01       	movw	r18, r24
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	88 2f       	mov	r24, r24
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	e0 50       	subi	r30, 0x00	; 0
 8d8:	f0 40       	sbci	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	99 27       	eor	r25, r25
 8de:	87 fd       	sbrc	r24, 7
 8e0:	90 95       	com	r25
 8e2:	28 0f       	add	r18, r24
 8e4:	39 1f       	adc	r19, r25
 8e6:	80 91 00 00 	lds	r24, 0x0000
 8ea:	88 2f       	mov	r24, r24
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	28 17       	cp	r18, r24
 8f0:	39 07       	cpc	r19, r25
 8f2:	04 f4       	brge	.+0      	; 0x8f4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x18a>
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	fc 01       	movw	r30, r24
 8fc:	e0 50       	subi	r30, 0x00	; 0
 8fe:	f0 40       	sbci	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	8c 30       	cpi	r24, 0x0C	; 12
 904:	04 f4       	brge	.+0      	; 0x906 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x19c>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	88 87       	std	Y+8, r24	; 0x08
 90a:	00 c0       	rjmp	.+0      	; 0x90c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x1a2>
 90c:	18 86       	std	Y+8, r1	; 0x08
 90e:	88 85       	ldd	r24, Y+8	; 0x08
 910:	88 23       	and	r24, r24
 912:	01 f4       	brne	.+0      	; 0x914 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x1aa>
 914:	00 c0       	rjmp	.+0      	; 0x916 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x1ac>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
 916:	ea 81       	ldd	r30, Y+2	; 0x02
 918:	fb 81       	ldd	r31, Y+3	; 0x03
 91a:	40 81       	ld	r20, Z
 91c:	51 81       	ldd	r21, Z+1	; 0x01
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	28 2f       	mov	r18, r24
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	c9 01       	movw	r24, r18
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	82 0f       	add	r24, r18
 92c:	93 1f       	adc	r25, r19
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	9c 01       	movw	r18, r24
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	88 2f       	mov	r24, r24
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	fc 01       	movw	r30, r24
 940:	e0 50       	subi	r30, 0x00	; 0
 942:	f0 40       	sbci	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	99 27       	eor	r25, r25
 948:	87 fd       	sbrc	r24, 7
 94a:	90 95       	com	r25
 94c:	28 0f       	add	r18, r24
 94e:	39 1f       	adc	r19, r25
 950:	c9 01       	movw	r24, r18
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	82 0f       	add	r24, r18
 958:	93 1f       	adc	r25, r19
 95a:	fc 01       	movw	r30, r24
 95c:	e0 50       	subi	r30, 0x00	; 0
 95e:	f0 40       	sbci	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	91 81       	ldd	r25, Z+1	; 0x01
 964:	84 0f       	add	r24, r20
 966:	95 1f       	adc	r25, r21
 968:	ec 81       	ldd	r30, Y+4	; 0x04
 96a:	fd 81       	ldd	r31, Y+5	; 0x05
 96c:	91 83       	std	Z+1, r25	; 0x01
 96e:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	28 2f       	mov	r18, r24
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	c9 01       	movw	r24, r18
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	82 0f       	add	r24, r18
 97e:	93 1f       	adc	r25, r19
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	9c 01       	movw	r18, r24
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	88 2f       	mov	r24, r24
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	fc 01       	movw	r30, r24
 992:	e0 50       	subi	r30, 0x00	; 0
 994:	f0 40       	sbci	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	99 27       	eor	r25, r25
 99a:	87 fd       	sbrc	r24, 7
 99c:	90 95       	com	r25
 99e:	28 0f       	add	r18, r24
 9a0:	39 1f       	adc	r19, r25
 9a2:	c9 01       	movw	r24, r18
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	82 0f       	add	r24, r18
 9aa:	93 1f       	adc	r25, r19
 9ac:	fc 01       	movw	r30, r24
 9ae:	e0 50       	subi	r30, 0x00	; 0
 9b0:	f0 40       	sbci	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	82 95       	swap	r24
 9b6:	86 95       	lsr	r24
 9b8:	86 95       	lsr	r24
 9ba:	83 70       	andi	r24, 0x03	; 3
 9bc:	81 70       	andi	r24, 0x01	; 1
 9be:	1f 82       	std	Y+7, r1	; 0x07
 9c0:	81 30       	cpi	r24, 0x01	; 1
 9c2:	01 f4       	brne	.+0      	; 0x9c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x25a>
 9c4:	21 e0       	ldi	r18, 0x01	; 1
 9c6:	2f 83       	std	Y+7, r18	; 0x07
 9c8:	8f 81       	ldd	r24, Y+7	; 0x07
 9ca:	88 23       	and	r24, r24
 9cc:	01 f4       	brne	.+0      	; 0x9ce <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x264>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x266>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	28 2f       	mov	r18, r24
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	c9 01       	movw	r24, r18
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	82 0f       	add	r24, r18
 9de:	93 1f       	adc	r25, r19
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	9c 01       	movw	r18, r24
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	fc 01       	movw	r30, r24
 9f2:	e0 50       	subi	r30, 0x00	; 0
 9f4:	f0 40       	sbci	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	99 27       	eor	r25, r25
 9fa:	87 fd       	sbrc	r24, 7
 9fc:	90 95       	com	r25
 9fe:	28 0f       	add	r18, r24
 a00:	39 1f       	adc	r19, r25
 a02:	c9 01       	movw	r24, r18
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	82 0f       	add	r24, r18
 a0a:	93 1f       	adc	r25, r19
 a0c:	fc 01       	movw	r30, r24
 a0e:	e0 50       	subi	r30, 0x00	; 0
 a10:	f0 40       	sbci	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	8f 73       	andi	r24, 0x3F	; 63
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2b4>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
 a1e:	ea 81       	ldd	r30, Y+2	; 0x02
 a20:	fb 81       	ldd	r31, Y+3	; 0x03
 a22:	80 81       	ld	r24, Z
 a24:	91 81       	ldd	r25, Z+1	; 0x01
 a26:	1e 82       	std	Y+6, r1	; 0x06
 a28:	2c e9       	ldi	r18, 0x9C	; 156
 a2a:	84 34       	cpi	r24, 0x44	; 68
 a2c:	92 07       	cpc	r25, r18
 a2e:	00 f4       	brcc	.+0      	; 0xa30 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c6>
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	8e 83       	std	Y+6, r24	; 0x06
 a34:	2e 81       	ldd	r18, Y+6	; 0x06
 a36:	22 23       	and	r18, r18
 a38:	01 f0       	breq	.+0      	; 0xa3a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2d0>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
 a3a:	ec 81       	ldd	r30, Y+4	; 0x04
 a3c:	fd 81       	ldd	r31, Y+5	; 0x05
 a3e:	80 e4       	ldi	r24, 0x40	; 64
 a40:	9c e9       	ldi	r25, 0x9C	; 156
 a42:	91 83       	std	Z+1, r25	; 0x01
 a44:	80 83       	st	Z, r24
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2de>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
 a48:	ea 81       	ldd	r30, Y+2	; 0x02
 a4a:	fb 81       	ldd	r31, Y+3	; 0x03
 a4c:	80 81       	ld	r24, Z
 a4e:	91 81       	ldd	r25, Z+1	; 0x01
 a50:	04 96       	adiw	r24, 0x04	; 4
 a52:	ec 81       	ldd	r30, Y+4	; 0x04
 a54:	fd 81       	ldd	r31, Y+5	; 0x05
 a56:	91 83       	std	Z+1, r25	; 0x01
 a58:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	88 2f       	mov	r24, r24
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	fc 01       	movw	r30, r24
 a62:	e0 50       	subi	r30, 0x00	; 0
 a64:	f0 40       	sbci	r31, 0x00	; 0
 a66:	8f ef       	ldi	r24, 0xFF	; 255
 a68:	80 83       	st	Z, r24
  }
}
 a6a:	2a 96       	adiw	r28, 0x0a	; 10
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	cf 91       	pop	r28
 a78:	df 91       	pop	r29
 a7a:	08 95       	ret

00000a7c <__vector_11>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
 a7c:	1f 92       	push	r1
 a7e:	0f 92       	push	r0
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	0f 92       	push	r0
 a84:	11 24       	eor	r1, r1
 a86:	2f 93       	push	r18
 a88:	3f 93       	push	r19
 a8a:	4f 93       	push	r20
 a8c:	5f 93       	push	r21
 a8e:	6f 93       	push	r22
 a90:	7f 93       	push	r23
 a92:	8f 93       	push	r24
 a94:	9f 93       	push	r25
 a96:	af 93       	push	r26
 a98:	bf 93       	push	r27
 a9a:	ef 93       	push	r30
 a9c:	ff 93       	push	r31
 a9e:	df 93       	push	r29
 aa0:	cf 93       	push	r28
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	64 e8       	ldi	r22, 0x84	; 132
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	48 e8       	ldi	r20, 0x88	; 136
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	0e 94 00 00 	call	0	; 0x0 <_ZL7initISR18timer16_Sequence_t>
}
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	ff 91       	pop	r31
 aba:	ef 91       	pop	r30
 abc:	bf 91       	pop	r27
 abe:	af 91       	pop	r26
 ac0:	9f 91       	pop	r25
 ac2:	8f 91       	pop	r24
 ac4:	7f 91       	pop	r23
 ac6:	6f 91       	pop	r22
 ac8:	5f 91       	pop	r21
 aca:	4f 91       	pop	r20
 acc:	3f 91       	pop	r19
 ace:	2f 91       	pop	r18
 ad0:	0f 90       	pop	r0
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	0f 90       	pop	r0
 ad6:	1f 90       	pop	r1
 ad8:	18 95       	reti
