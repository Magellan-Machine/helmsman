In archive libWire.a:

Wire.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00000000  00000000  0000057e  2**0
                  ALLOC
  3 .stab         00000c48  00000000  00000000  00000580  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f78  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .ctors        00000002  00000000  00000000  00002140  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_ZN7TwoWireC2Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN7TwoWireC2Ev+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
{
}
   e:	0f 90       	pop	r0
  10:	0f 90       	pop	r0
  12:	cf 91       	pop	r28
  14:	df 91       	pop	r29
  16:	08 95       	ret

00000018 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
  18:	df 93       	push	r29
  1a:	cf 93       	push	r28
  1c:	00 d0       	rcall	.+0      	; 0x1e <_ZN7TwoWireC1Ev+0x6>
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	9a 83       	std	Y+2, r25	; 0x02
  24:	89 83       	std	Y+1, r24	; 0x01
{
}
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

00000030 <_ZN7TwoWire17beginTransmissionEh>:
uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
}

void TwoWire::beginTransmission(uint8_t address)
  30:	df 93       	push	r29
  32:	cf 93       	push	r28
  34:	00 d0       	rcall	.+0      	; 0x36 <_ZN7TwoWire17beginTransmissionEh+0x6>
  36:	0f 92       	push	r0
  38:	cd b7       	in	r28, 0x3d	; 61
  3a:	de b7       	in	r29, 0x3e	; 62
  3c:	9a 83       	std	Y+2, r25	; 0x02
  3e:	89 83       	std	Y+1, r24	; 0x01
  40:	6b 83       	std	Y+3, r22	; 0x03
{
  // indicate that we are transmitting
  transmitting = 1;
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	80 93 00 00 	sts	0x0000, r24
  // set address of targeted slave
  txAddress = address;
  48:	8b 81       	ldd	r24, Y+3	; 0x03
  4a:	80 93 00 00 	sts	0x0000, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  4e:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
  52:	10 92 00 00 	sts	0x0000, r1
}
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	0f 90       	pop	r0
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

00000062 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
  62:	df 93       	push	r29
  64:	cf 93       	push	r28
  66:	00 d0       	rcall	.+0      	; 0x68 <_ZN7TwoWire17beginTransmissionEi+0x6>
  68:	00 d0       	rcall	.+0      	; 0x6a <_ZN7TwoWire17beginTransmissionEi+0x8>
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
  6e:	9a 83       	std	Y+2, r25	; 0x02
  70:	89 83       	std	Y+1, r24	; 0x01
  72:	7c 83       	std	Y+4, r23	; 0x04
  74:	6b 83       	std	Y+3, r22	; 0x03
{
  beginTransmission((uint8_t)address);
  76:	2b 81       	ldd	r18, Y+3	; 0x03
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	9a 81       	ldd	r25, Y+2	; 0x02
  7c:	62 2f       	mov	r22, r18
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <_ZN7TwoWire9availableEv+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
{
  return rxBufferLength - rxBufferIndex;
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	80 91 00 00 	lds	r24, 0x0000
  a6:	29 2f       	mov	r18, r25
  a8:	28 1b       	sub	r18, r24
  aa:	82 2f       	mov	r24, r18
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <_ZN7TwoWire7receiveEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::receive(void)
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <_ZN7TwoWire7receiveEv+0x6>
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9b 83       	std	Y+3, r25	; 0x03
  c4:	8a 83       	std	Y+2, r24	; 0x02
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  c6:	19 82       	std	Y+1, r1	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
  c8:	90 91 00 00 	lds	r25, 0x0000
  cc:	80 91 00 00 	lds	r24, 0x0000
  d0:	98 17       	cp	r25, r24
  d2:	00 f4       	brcc	.+0      	; 0xd4 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
  d4:	20 91 00 00 	lds	r18, 0x0000
  d8:	30 91 00 00 	lds	r19, 0x0000
  dc:	80 91 00 00 	lds	r24, 0x0000
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	e8 0f       	add	r30, r24
  e8:	f9 1f       	adc	r31, r25
  ea:	80 81       	ld	r24, Z
  ec:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
  ee:	80 91 00 00 	lds	r24, 0x0000
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 00 00 	sts	0x0000, r24
  }

  return value;
  f8:	89 81       	ldd	r24, Y+1	; 0x01
}
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	00 d0       	rcall	.+0      	; 0x10c <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
 10c:	00 d0       	rcall	.+0      	; 0x10e <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
 10e:	0f 92       	push	r0
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	9b 83       	std	Y+3, r25	; 0x03
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	7d 83       	std	Y+5, r23	; 0x05
 11a:	6c 83       	std	Y+4, r22	; 0x04
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
 11c:	80 91 00 00 	lds	r24, 0x0000
 120:	90 91 00 00 	lds	r25, 0x0000
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	01 f0       	breq	.+0      	; 0x128 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
 128:	90 91 00 00 	lds	r25, 0x0000
 12c:	80 91 00 00 	lds	r24, 0x0000
 130:	98 17       	cp	r25, r24
 132:	00 f0       	brcs	.+0      	; 0x134 <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
 134:	19 82       	std	Y+1, r1	; 0x01
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN7TwoWire16onReceiveServiceEPhi+0x32>
    rxBuffer[i] = inBytes[i];    
 138:	20 91 00 00 	lds	r18, 0x0000
 13c:	30 91 00 00 	lds	r19, 0x0000
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	d9 01       	movw	r26, r18
 148:	a8 0f       	add	r26, r24
 14a:	b9 1f       	adc	r27, r25
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	9b 81       	ldd	r25, Y+3	; 0x03
 156:	fc 01       	movw	r30, r24
 158:	e2 0f       	add	r30, r18
 15a:	f3 1f       	adc	r31, r19
 15c:	80 81       	ld	r24, Z
 15e:	8c 93       	st	X, r24
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	8c 81       	ldd	r24, Y+4	; 0x04
 16e:	9d 81       	ldd	r25, Y+5	; 0x05
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	04 f0       	brlt	.+0      	; 0x176 <_ZN7TwoWire16onReceiveServiceEPhi+0x70>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
 176:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = numBytes;
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	80 93 00 00 	sts	0x0000, r24
  // alert user program
  user_onReceive(numBytes);
 180:	e0 91 00 00 	lds	r30, 0x0000
 184:	f0 91 00 00 	lds	r31, 0x0000
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	9d 81       	ldd	r25, Y+5	; 0x05
 18c:	09 95       	icall
}
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	cf 91       	pop	r28
 19a:	df 91       	pop	r29
 19c:	08 95       	ret

0000019e <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
 1a6:	80 91 00 00 	lds	r24, 0x0000
 1aa:	90 91 00 00 	lds	r25, 0x0000
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	01 f0       	breq	.+0      	; 0x1b2 <_ZN7TwoWire16onRequestServiceEv+0x14>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
 1b2:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 1b6:	10 92 00 00 	sts	0x0000, r1
  // alert user program
  user_onRequest();
 1ba:	e0 91 00 00 	lds	r30, 0x0000
 1be:	f0 91 00 00 	lds	r31, 0x0000
 1c2:	09 95       	icall
}
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <_ZN7TwoWire9onReceiveEPFviE+0x6>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_ZN7TwoWire9onReceiveEPFviE+0x8>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	9a 83       	std	Y+2, r25	; 0x02
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	7c 83       	std	Y+4, r23	; 0x04
 1dc:	6b 83       	std	Y+3, r22	; 0x03
{
  user_onReceive = function;
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	90 93 00 00 	sts	0x0000, r25
 1e6:	80 93 00 00 	sts	0x0000, r24
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <_ZN7TwoWire9onRequestEPFvvE+0x6>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <_ZN7TwoWire9onRequestEPFvvE+0x8>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	7c 83       	std	Y+4, r23	; 0x04
 20a:	6b 83       	std	Y+3, r22	; 0x03
{
  user_onRequest = function;
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	90 93 00 00 	sts	0x0000, r25
 214:	80 93 00 00 	sts	0x0000, r24
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	cf 91       	pop	r28
 222:	df 91       	pop	r29
 224:	08 95       	ret

00000226 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	00 d0       	rcall	.+0      	; 0x22c <_Z41__static_initialization_and_destruction_0ii+0x6>
 22c:	00 d0       	rcall	.+0      	; 0x22e <_Z41__static_initialization_and_destruction_0ii+0x8>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	7c 83       	std	Y+4, r23	; 0x04
 238:	6b 83       	std	Y+3, r22	; 0x03
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	91 05       	cpc	r25, r1
 242:	01 f4       	brne	.+0      	; 0x244 <_Z41__static_initialization_and_destruction_0ii+0x1e>
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	92 07       	cpc	r25, r18
 24e:	01 f4       	brne	.+0      	; 0x250 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	6f ef       	ldi	r22, 0xFF	; 255
 274:	7f ef       	ldi	r23, 0xFF	; 255
 276:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <_ZN7TwoWire4sendEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	00 d0       	rcall	.+0      	; 0x286 <_ZN7TwoWire4sendEh+0x6>
 286:	0f 92       	push	r0
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	6b 83       	std	Y+3, r22	; 0x03
{
  if(transmitting){
 292:	80 91 00 00 	lds	r24, 0x0000
 296:	88 23       	and	r24, r24
 298:	01 f0       	breq	.+0      	; 0x29a <_ZN7TwoWire4sendEh+0x1a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 29a:	80 91 00 00 	lds	r24, 0x0000
 29e:	80 32       	cpi	r24, 0x20	; 32
 2a0:	00 f4       	brcc	.+0      	; 0x2a2 <_ZN7TwoWire4sendEh+0x22>
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 2a2:	20 91 00 00 	lds	r18, 0x0000
 2a6:	30 91 00 00 	lds	r19, 0x0000
 2aa:	80 91 00 00 	lds	r24, 0x0000
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	e8 0f       	add	r30, r24
 2b6:	f9 1f       	adc	r31, r25
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	80 83       	st	Z, r24
    ++txBufferIndex;
 2bc:	80 91 00 00 	lds	r24, 0x0000
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 00 00 	sts	0x0000, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 2c6:	80 91 00 00 	lds	r24, 0x0000
 2ca:	80 93 00 00 	sts	0x0000, r24
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <_ZN7TwoWire4sendEh+0x50>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 2d0:	ce 01       	movw	r24, r28
 2d2:	03 96       	adiw	r24, 0x03	; 3
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
  }
}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	08 95       	ret

000002e6 <_ZN7TwoWire4sendEi>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <_ZN7TwoWire4sendEi+0x6>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <_ZN7TwoWire4sendEi+0x8>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	7c 83       	std	Y+4, r23	; 0x04
 2f8:	6b 83       	std	Y+3, r22	; 0x03
{
  send((uint8_t)data);
 2fa:	2b 81       	ldd	r18, Y+3	; 0x03
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	62 2f       	mov	r22, r18
 302:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <_ZN7TwoWire4sendEPhh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	00 d0       	rcall	.+0      	; 0x31a <_ZN7TwoWire4sendEPhh+0x6>
 31a:	00 d0       	rcall	.+0      	; 0x31c <_ZN7TwoWire4sendEPhh+0x8>
 31c:	00 d0       	rcall	.+0      	; 0x31e <_ZN7TwoWire4sendEPhh+0xa>
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	9b 83       	std	Y+3, r25	; 0x03
 324:	8a 83       	std	Y+2, r24	; 0x02
 326:	7d 83       	std	Y+5, r23	; 0x05
 328:	6c 83       	std	Y+4, r22	; 0x04
 32a:	4e 83       	std	Y+6, r20	; 0x06
{
  if(transmitting){
 32c:	80 91 00 00 	lds	r24, 0x0000
 330:	88 23       	and	r24, r24
 332:	01 f0       	breq	.+0      	; 0x334 <_ZN7TwoWire4sendEPhh+0x20>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	00 c0       	rjmp	.+0      	; 0x338 <_ZN7TwoWire4sendEPhh+0x24>
      send(data[i]);
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	9d 81       	ldd	r25, Y+5	; 0x05
 342:	fc 01       	movw	r30, r24
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	20 81       	ld	r18, Z
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	9b 81       	ldd	r25, Y+3	; 0x03
 34e:	62 2f       	mov	r22, r18
 350:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	99 81       	ldd	r25, Y+1	; 0x01
 35c:	8e 81       	ldd	r24, Y+6	; 0x06
 35e:	98 17       	cp	r25, r24
 360:	00 f0       	brcs	.+0      	; 0x362 <_ZN7TwoWire4sendEPhh+0x4e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <_ZN7TwoWire4sendEPhh+0x50>
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 364:	8c 81       	ldd	r24, Y+4	; 0x04
 366:	9d 81       	ldd	r25, Y+5	; 0x05
 368:	6e 81       	ldd	r22, Y+6	; 0x06
 36a:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
  }
}
 36e:	26 96       	adiw	r28, 0x06	; 6
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <_ZN7TwoWire4sendEPc>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	00 d0       	rcall	.+0      	; 0x386 <_ZN7TwoWire4sendEPc+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <_ZN7TwoWire4sendEPc+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	7c 83       	std	Y+4, r23	; 0x04
 392:	6b 83       	std	Y+3, r22	; 0x03
{
  send((uint8_t*)data, strlen(data));
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	9c 81       	ldd	r25, Y+4	; 0x04
 398:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 39c:	48 2f       	mov	r20, r24
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	2b 81       	ldd	r18, Y+3	; 0x03
 3a4:	3c 81       	ldd	r19, Y+4	; 0x04
 3a6:	b9 01       	movw	r22, r18
 3a8:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <_ZN7TwoWire15endTransmissionEv>:
void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}

uint8_t TwoWire::endTransmission(void)
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <_ZN7TwoWire15endTransmissionEv+0x6>
 3c0:	0f 92       	push	r0
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	9b 83       	std	Y+3, r25	; 0x03
 3c8:	8a 83       	std	Y+2, r24	; 0x02
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
 3ca:	80 91 00 00 	lds	r24, 0x0000
 3ce:	20 91 00 00 	lds	r18, 0x0000
 3d2:	30 91 00 00 	lds	r19, 0x0000
 3d6:	90 91 00 00 	lds	r25, 0x0000
 3da:	b9 01       	movw	r22, r18
 3dc:	49 2f       	mov	r20, r25
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 3e4:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 3e6:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 3ea:	10 92 00 00 	sts	0x0000, r1
  // indicate that we are done transmitting
  transmitting = 0;
 3ee:	10 92 00 00 	sts	0x0000, r1
  return ret;
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <_ZN7TwoWire11requestFromEhh>:
void TwoWire::begin(int address)
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	00 d0       	rcall	.+0      	; 0x406 <_ZN7TwoWire11requestFromEhh+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <_ZN7TwoWire11requestFromEhh+0x8>
 408:	0f 92       	push	r0
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	9b 83       	std	Y+3, r25	; 0x03
 410:	8a 83       	std	Y+2, r24	; 0x02
 412:	6c 83       	std	Y+4, r22	; 0x04
 414:	4d 83       	std	Y+5, r20	; 0x05
{
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 416:	8d 81       	ldd	r24, Y+5	; 0x05
 418:	81 32       	cpi	r24, 0x21	; 33
 41a:	00 f0       	brcs	.+0      	; 0x41c <_ZN7TwoWire11requestFromEhh+0x1c>
    quantity = BUFFER_LENGTH;
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
 420:	20 91 00 00 	lds	r18, 0x0000
 424:	30 91 00 00 	lds	r19, 0x0000
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	b9 01       	movw	r22, r18
 42c:	4d 81       	ldd	r20, Y+5	; 0x05
 42e:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 432:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
 434:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = read;
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	80 93 00 00 	sts	0x0000, r24

  return read;
 43e:	89 81       	ldd	r24, Y+1	; 0x01
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	00 d0       	rcall	.+0      	; 0x456 <_ZN7TwoWire11requestFromEii+0x6>
 456:	00 d0       	rcall	.+0      	; 0x458 <_ZN7TwoWire11requestFromEii+0x8>
 458:	00 d0       	rcall	.+0      	; 0x45a <_ZN7TwoWire11requestFromEii+0xa>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	9a 83       	std	Y+2, r25	; 0x02
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	7c 83       	std	Y+4, r23	; 0x04
 464:	6b 83       	std	Y+3, r22	; 0x03
 466:	5e 83       	std	Y+6, r21	; 0x06
 468:	4d 83       	std	Y+5, r20	; 0x05
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
 46a:	2b 81       	ldd	r18, Y+3	; 0x03
 46c:	3d 81       	ldd	r19, Y+5	; 0x05
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	62 2f       	mov	r22, r18
 474:	43 2f       	mov	r20, r19
 476:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 47a:	26 96       	adiw	r28, 0x06	; 6
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <_ZN7TwoWire5beginEv>:
{
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	00 d0       	rcall	.+0      	; 0x492 <_ZN7TwoWire5beginEv+0x6>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	9a 83       	std	Y+2, r25	; 0x02
 498:	89 83       	std	Y+1, r24	; 0x01
{
  // init buffer for reads
  rxBuffer = (uint8_t*) calloc(BUFFER_LENGTH, sizeof(uint8_t));
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 4a6:	90 93 00 00 	sts	0x0000, r25
 4aa:	80 93 00 00 	sts	0x0000, r24
  rxBufferIndex = 0;
 4ae:	10 92 00 00 	sts	0x0000, r1
  rxBufferLength = 0;
 4b2:	10 92 00 00 	sts	0x0000, r1

  // init buffer for writes
  txBuffer = (uint8_t*) calloc(BUFFER_LENGTH, sizeof(uint8_t));
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
 4c2:	90 93 00 00 	sts	0x0000, r25
 4c6:	80 93 00 00 	sts	0x0000, r24
  txBufferIndex = 0;
 4ca:	10 92 00 00 	sts	0x0000, r1
  txBufferLength = 0;
 4ce:	10 92 00 00 	sts	0x0000, r1

  twi_init();
 4d2:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	cf 91       	pop	r28
 4dc:	df 91       	pop	r29
 4de:	08 95       	ret

000004e0 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
 4e0:	df 93       	push	r29
 4e2:	cf 93       	push	r28
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <_ZN7TwoWire5beginEh+0x6>
 4e6:	0f 92       	push	r0
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	9a 83       	std	Y+2, r25	; 0x02
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	6b 83       	std	Y+3, r22	; 0x03
{
  twi_setAddress(address);
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
  twi_attachSlaveTxEvent(onRequestService);
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
  twi_attachSlaveRxEvent(onReceiveService);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
  begin();
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	9a 81       	ldd	r25, Y+2	; 0x02
 50c:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	cf 91       	pop	r28
 518:	df 91       	pop	r29
 51a:	08 95       	ret

0000051c <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	00 d0       	rcall	.+0      	; 0x522 <_ZN7TwoWire5beginEi+0x6>
 522:	00 d0       	rcall	.+0      	; 0x524 <_ZN7TwoWire5beginEi+0x8>
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	9a 83       	std	Y+2, r25	; 0x02
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	7c 83       	std	Y+4, r23	; 0x04
 52e:	6b 83       	std	Y+3, r22	; 0x03
{
  begin((uint8_t)address);
 530:	2b 81       	ldd	r18, Y+3	; 0x03
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	9a 81       	ldd	r25, Y+2	; 0x02
 536:	62 2f       	mov	r22, r18
 538:	0e 94 00 00 	call	0	; 0x0 <_ZN7TwoWireC2Ev>
}
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	cf 91       	pop	r28
 546:	df 91       	pop	r29
 548:	08 95       	ret

twi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00000000  00000000  000007f4  2**0
                  ALLOC
  3 .stab         00000bb8  00000000  00000000  000007f4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a82  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
   8:	10 92 00 00 	sts	0x0000, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
   c:	a8 e2       	ldi	r26, 0x28	; 40
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	e8 e2       	ldi	r30, 0x28	; 40
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	80 61       	ori	r24, 0x10	; 16
  18:	8c 93       	st	X, r24
    sbi(PORTC, 5);
  1a:	a8 e2       	ldi	r26, 0x28	; 40
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	e8 e2       	ldi	r30, 0x28	; 40
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	80 62       	ori	r24, 0x20	; 32
  26:	8c 93       	st	X, r24
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
  28:	a9 eb       	ldi	r26, 0xB9	; 185
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e9 eb       	ldi	r30, 0xB9	; 185
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	80 81       	ld	r24, Z
  32:	8e 7f       	andi	r24, 0xFE	; 254
  34:	8c 93       	st	X, r24
  cbi(TWSR, TWPS1);
  36:	a9 eb       	ldi	r26, 0xB9	; 185
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e9 eb       	ldi	r30, 0xB9	; 185
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	80 81       	ld	r24, Z
  40:	8d 7f       	andi	r24, 0xFD	; 253
  42:	8c 93       	st	X, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
  44:	e8 eb       	ldi	r30, 0xB8	; 184
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	88 e4       	ldi	r24, 0x48	; 72
  4a:	80 83       	st	Z, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
  4c:	ec eb       	ldi	r30, 0xBC	; 188
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	85 e4       	ldi	r24, 0x45	; 69
  52:	80 83       	st	Z, r24
	
  // allocate buffers
  twi_masterBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
  54:	80 e2       	ldi	r24, 0x20	; 32
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
  60:	90 93 00 00 	sts	0x0000, r25
  64:	80 93 00 00 	sts	0x0000, r24
  twi_txBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
  68:	80 e2       	ldi	r24, 0x20	; 32
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <twi_init>
  74:	90 93 00 00 	sts	0x0000, r25
  78:	80 93 00 00 	sts	0x0000, r24
  twi_rxBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <twi_init>
  88:	90 93 00 00 	sts	0x0000, r25
  8c:	80 93 00 00 	sts	0x0000, r24
}
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
  a2:	ea eb       	ldi	r30, 0xBA	; 186
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	88 0f       	add	r24, r24
  aa:	80 83       	st	Z, r24
}
  ac:	0f 90       	pop	r0
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <twi_readFrom>:
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <twi_readFrom+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <twi_readFrom+0x8>
  bc:	00 d0       	rcall	.+0      	; 0xbe <twi_readFrom+0xa>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	7c 83       	std	Y+4, r23	; 0x04
  c6:	6b 83       	std	Y+3, r22	; 0x03
  c8:	4d 83       	std	Y+5, r20	; 0x05
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
  ca:	8d 81       	ldd	r24, Y+5	; 0x05
  cc:	81 32       	cpi	r24, 0x21	; 33
  ce:	00 f0       	brcs	.+0      	; 0xd0 <twi_readFrom+0x1c>
    return 0;
  d0:	1e 82       	std	Y+6, r1	; 0x06
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <twi_readFrom+0x20>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
  d4:	80 91 00 00 	lds	r24, 0x0000
  d8:	88 23       	and	r24, r24
  da:	01 f4       	brne	.+0      	; 0xdc <twi_readFrom+0x28>
    continue;
  }
  twi_state = TWI_MRX;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 00 	sts	0x0000, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	80 93 00 00 	sts	0x0000, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  e8:	10 92 00 00 	sts	0x0000, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 00 00 	sts	0x0000, r24
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 00 00 	sts	0x0000, r24
  twi_slarw |= address << 1;
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	98 2f       	mov	r25, r24
 106:	80 91 00 00 	lds	r24, 0x0000
 10a:	89 2b       	or	r24, r25
 10c:	80 93 00 00 	sts	0x0000, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	85 ee       	ldi	r24, 0xE5	; 229
 116:	80 83       	st	Z, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
 118:	80 91 00 00 	lds	r24, 0x0000
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	01 f0       	breq	.+0      	; 0x120 <twi_readFrom+0x6c>
    continue;
  }

  if (twi_masterBufferIndex < length)
 120:	90 91 00 00 	lds	r25, 0x0000
 124:	8d 81       	ldd	r24, Y+5	; 0x05
 126:	98 17       	cp	r25, r24
 128:	00 f4       	brcc	.+0      	; 0x12a <twi_readFrom+0x76>
    length = twi_masterBufferIndex;
 12a:	80 91 00 00 	lds	r24, 0x0000
 12e:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 130:	19 82       	std	Y+1, r1	; 0x01
 132:	00 c0       	rjmp	.+0      	; 0x134 <twi_readFrom+0x80>
    data[i] = twi_masterBuffer[i];
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	dc 01       	movw	r26, r24
 140:	a2 0f       	add	r26, r18
 142:	b3 1f       	adc	r27, r19
 144:	20 91 00 00 	lds	r18, 0x0000
 148:	30 91 00 00 	lds	r19, 0x0000
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	e8 0f       	add	r30, r24
 156:	f9 1f       	adc	r31, r25
 158:	80 81       	ld	r24, Z
 15a:	8c 93       	st	X, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	99 81       	ldd	r25, Y+1	; 0x01
 164:	8d 81       	ldd	r24, Y+5	; 0x05
 166:	98 17       	cp	r25, r24
 168:	00 f0       	brcs	.+0      	; 0x16a <twi_readFrom+0xb6>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
 16a:	8d 81       	ldd	r24, Y+5	; 0x05
 16c:	8e 83       	std	Y+6, r24	; 0x06
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
}
 170:	26 96       	adiw	r28, 0x06	; 6
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	08 95       	ret

00000182 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	27 97       	sbiw	r28, 0x07	; 7
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	8a 83       	std	Y+2, r24	; 0x02
 198:	7c 83       	std	Y+4, r23	; 0x04
 19a:	6b 83       	std	Y+3, r22	; 0x03
 19c:	4d 83       	std	Y+5, r20	; 0x05
 19e:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
 1a0:	8d 81       	ldd	r24, Y+5	; 0x05
 1a2:	81 32       	cpi	r24, 0x21	; 33
 1a4:	00 f0       	brcs	.+0      	; 0x1a6 <twi_writeTo+0x24>
    return 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8f 83       	std	Y+7, r24	; 0x07
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <twi_writeTo+0x2a>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
 1ac:	80 91 00 00 	lds	r24, 0x0000
 1b0:	88 23       	and	r24, r24
 1b2:	01 f4       	brne	.+0      	; 0x1b4 <twi_writeTo+0x32>
    continue;
  }
  twi_state = TWI_MTX;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 00 00 	sts	0x0000, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 93 00 00 	sts	0x0000, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 1c0:	10 92 00 00 	sts	0x0000, r1
  twi_masterBufferLength = length;
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	80 93 00 00 	sts	0x0000, r24
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
 1ca:	19 82       	std	Y+1, r1	; 0x01
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <twi_writeTo+0x4c>
    twi_masterBuffer[i] = data[i];
 1ce:	20 91 00 00 	lds	r18, 0x0000
 1d2:	30 91 00 00 	lds	r19, 0x0000
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	d9 01       	movw	r26, r18
 1de:	a8 0f       	add	r26, r24
 1e0:	b9 1f       	adc	r27, r25
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	fc 01       	movw	r30, r24
 1ee:	e2 0f       	add	r30, r18
 1f0:	f3 1f       	adc	r31, r19
 1f2:	80 81       	ld	r24, Z
 1f4:	8c 93       	st	X, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	89 83       	std	Y+1, r24	; 0x01
 1fc:	99 81       	ldd	r25, Y+1	; 0x01
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	98 17       	cp	r25, r24
 202:	00 f0       	brcs	.+0      	; 0x204 <twi_writeTo+0x82>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
 204:	10 92 00 00 	sts	0x0000, r1
  twi_slarw |= address << 1;
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	98 2f       	mov	r25, r24
 214:	80 91 00 00 	lds	r24, 0x0000
 218:	89 2b       	or	r24, r25
 21a:	80 93 00 00 	sts	0x0000, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	85 ee       	ldi	r24, 0xE5	; 229
 224:	80 83       	st	Z, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
 226:	8e 81       	ldd	r24, Y+6	; 0x06
 228:	88 23       	and	r24, r24
 22a:	01 f0       	breq	.+0      	; 0x22c <twi_writeTo+0xaa>
 22c:	80 91 00 00 	lds	r24, 0x0000
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	01 f0       	breq	.+0      	; 0x234 <twi_writeTo+0xb2>
    continue;
  }
  
  if (twi_error == 0xFF)
 234:	80 91 00 00 	lds	r24, 0x0000
 238:	8f 3f       	cpi	r24, 0xFF	; 255
 23a:	01 f4       	brne	.+0      	; 0x23c <twi_writeTo+0xba>
    return 0;	// success
 23c:	1f 82       	std	Y+7, r1	; 0x07
 23e:	00 c0       	rjmp	.+0      	; 0x240 <twi_writeTo+0xbe>
  else if (twi_error == TW_MT_SLA_NACK)
 240:	80 91 00 00 	lds	r24, 0x0000
 244:	80 32       	cpi	r24, 0x20	; 32
 246:	01 f4       	brne	.+0      	; 0x248 <twi_writeTo+0xc6>
    return 2;	// error: address send, nack received
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	8f 83       	std	Y+7, r24	; 0x07
 24c:	00 c0       	rjmp	.+0      	; 0x24e <twi_writeTo+0xcc>
  else if (twi_error == TW_MT_DATA_NACK)
 24e:	80 91 00 00 	lds	r24, 0x0000
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	01 f4       	brne	.+0      	; 0x256 <twi_writeTo+0xd4>
    return 3;	// error: data send, nack received
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	8f 83       	std	Y+7, r24	; 0x07
 25a:	00 c0       	rjmp	.+0      	; 0x25c <twi_writeTo+0xda>
  else
    return 4;	// other twi error
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	8f 83       	std	Y+7, r24	; 0x07
 260:	8f 81       	ldd	r24, Y+7	; 0x07
}
 262:	27 96       	adiw	r28, 0x07	; 7
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	08 95       	ret

00000274 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	00 d0       	rcall	.+0      	; 0x27a <twi_transmit+0x6>
 27a:	00 d0       	rcall	.+0      	; 0x27c <twi_transmit+0x8>
 27c:	0f 92       	push	r0
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	9b 83       	std	Y+3, r25	; 0x03
 284:	8a 83       	std	Y+2, r24	; 0x02
 286:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	81 32       	cpi	r24, 0x21	; 33
 28c:	00 f0       	brcs	.+0      	; 0x28e <twi_transmit+0x1a>
    return 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	8d 83       	std	Y+5, r24	; 0x05
 292:	00 c0       	rjmp	.+0      	; 0x294 <twi_transmit+0x20>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
 294:	80 91 00 00 	lds	r24, 0x0000
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	01 f0       	breq	.+0      	; 0x29c <twi_transmit+0x28>
    return 2;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	8d 83       	std	Y+5, r24	; 0x05
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <twi_transmit+0x2e>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
 2a2:	8c 81       	ldd	r24, Y+4	; 0x04
 2a4:	80 93 00 00 	sts	0x0000, r24
  for(i = 0; i < length; ++i){
 2a8:	19 82       	std	Y+1, r1	; 0x01
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <twi_transmit+0x38>
    twi_txBuffer[i] = data[i];
 2ac:	20 91 00 00 	lds	r18, 0x0000
 2b0:	30 91 00 00 	lds	r19, 0x0000
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	d9 01       	movw	r26, r18
 2bc:	a8 0f       	add	r26, r24
 2be:	b9 1f       	adc	r27, r25
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ca:	fc 01       	movw	r30, r24
 2cc:	e2 0f       	add	r30, r18
 2ce:	f3 1f       	adc	r31, r19
 2d0:	80 81       	ld	r24, Z
 2d2:	8c 93       	st	X, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	99 81       	ldd	r25, Y+1	; 0x01
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	98 17       	cp	r25, r24
 2e0:	00 f0       	brcs	.+0      	; 0x2e2 <twi_transmit+0x6e>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
 2e2:	1d 82       	std	Y+5, r1	; 0x05
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	08 95       	ret

000002f6 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <twi_attachSlaveRxEvent+0x6>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	90 93 00 00 	sts	0x0000, r25
 30c:	80 93 00 00 	sts	0x0000, r24
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	00 d0       	rcall	.+0      	; 0x320 <twi_attachSlaveTxEvent+0x6>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	9a 83       	std	Y+2, r25	; 0x02
 326:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	9a 81       	ldd	r25, Y+2	; 0x02
 32c:	90 93 00 00 	sts	0x0000, r25
 330:	80 93 00 00 	sts	0x0000, r24
}
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	cf 91       	pop	r28
 33a:	df 91       	pop	r29
 33c:	08 95       	ret

0000033e <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	0f 92       	push	r0
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	88 23       	and	r24, r24
 34e:	01 f0       	breq	.+0      	; 0x350 <twi_reply+0x12>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 350:	ec eb       	ldi	r30, 0xBC	; 188
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	85 ec       	ldi	r24, 0xC5	; 197
 356:	80 83       	st	Z, r24
 358:	00 c0       	rjmp	.+0      	; 0x35a <twi_reply+0x1c>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 35a:	ec eb       	ldi	r30, 0xBC	; 188
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	85 e8       	ldi	r24, 0x85	; 133
 360:	80 83       	st	Z, r24
  }
}
 362:	0f 90       	pop	r0
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 372:	ec eb       	ldi	r30, 0xBC	; 188
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	85 ed       	ldi	r24, 0xD5	; 213
 378:	80 83       	st	Z, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 37a:	ec eb       	ldi	r30, 0xBC	; 188
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	80 71       	andi	r24, 0x10	; 16
 386:	90 70       	andi	r25, 0x00	; 0
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	01 f4       	brne	.+0      	; 0x38c <twi_stop+0x22>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 38c:	10 92 00 00 	sts	0x0000, r1
}
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 39e:	ec eb       	ldi	r30, 0xBC	; 188
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	85 ec       	ldi	r24, 0xC5	; 197
 3a4:	80 83       	st	Z, r24

  // update twi state
  twi_state = TWI_READY;
 3a6:	10 92 00 00 	sts	0x0000, r1
}
 3aa:	cf 91       	pop	r28
 3ac:	df 91       	pop	r29
 3ae:	08 95       	ret

000003b0 <__vector_24>:

SIGNAL(TWI_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
 3d2:	df 93       	push	r29
 3d4:	cf 93       	push	r28
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <__vector_24+0x28>
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
 3dc:	e9 eb       	ldi	r30, 0xB9	; 185
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	9c 01       	movw	r18, r24
 3e8:	28 7f       	andi	r18, 0xF8	; 248
 3ea:	30 70       	andi	r19, 0x00	; 0
 3ec:	3a 83       	std	Y+2, r19	; 0x02
 3ee:	29 83       	std	Y+1, r18	; 0x01
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	88 36       	cpi	r24, 0x68	; 104
 3f6:	91 05       	cpc	r25, r1
 3f8:	01 f4       	brne	.+0      	; 0x3fa <__vector_24+0x4a>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <__vector_24+0x4c>
 3fc:	29 81       	ldd	r18, Y+1	; 0x01
 3fe:	3a 81       	ldd	r19, Y+2	; 0x02
 400:	29 36       	cpi	r18, 0x69	; 105
 402:	31 05       	cpc	r19, r1
 404:	04 f0       	brlt	.+0      	; 0x406 <__vector_24+0x56>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__vector_24+0x58>
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	80 33       	cpi	r24, 0x30	; 48
 40e:	91 05       	cpc	r25, r1
 410:	01 f4       	brne	.+0      	; 0x412 <__vector_24+0x62>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__vector_24+0x64>
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	3a 81       	ldd	r19, Y+2	; 0x02
 418:	21 33       	cpi	r18, 0x31	; 49
 41a:	31 05       	cpc	r19, r1
 41c:	04 f4       	brge	.+0      	; 0x41e <__vector_24+0x6e>
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	80 31       	cpi	r24, 0x10	; 16
 424:	91 05       	cpc	r25, r1
 426:	01 f4       	brne	.+0      	; 0x428 <__vector_24+0x78>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__vector_24+0x7a>
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	3a 81       	ldd	r19, Y+2	; 0x02
 42e:	21 31       	cpi	r18, 0x11	; 17
 430:	31 05       	cpc	r19, r1
 432:	04 f4       	brge	.+0      	; 0x434 <__vector_24+0x84>
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	01 f4       	brne	.+0      	; 0x43c <__vector_24+0x8c>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__vector_24+0x8e>
 43e:	29 81       	ldd	r18, Y+1	; 0x01
 440:	3a 81       	ldd	r19, Y+2	; 0x02
 442:	28 30       	cpi	r18, 0x08	; 8
 444:	31 05       	cpc	r19, r1
 446:	01 f4       	brne	.+0      	; 0x448 <__vector_24+0x98>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__vector_24+0x9a>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__vector_24+0x9c>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	9a 81       	ldd	r25, Y+2	; 0x02
 450:	80 32       	cpi	r24, 0x20	; 32
 452:	91 05       	cpc	r25, r1
 454:	01 f4       	brne	.+0      	; 0x456 <__vector_24+0xa6>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__vector_24+0xa8>
 458:	29 81       	ldd	r18, Y+1	; 0x01
 45a:	3a 81       	ldd	r19, Y+2	; 0x02
 45c:	28 32       	cpi	r18, 0x28	; 40
 45e:	31 05       	cpc	r19, r1
 460:	01 f4       	brne	.+0      	; 0x462 <__vector_24+0xb2>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__vector_24+0xb4>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	9a 81       	ldd	r25, Y+2	; 0x02
 468:	88 31       	cpi	r24, 0x18	; 24
 46a:	91 05       	cpc	r25, r1
 46c:	01 f4       	brne	.+0      	; 0x46e <__vector_24+0xbe>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__vector_24+0xc0>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__vector_24+0xc2>
 472:	29 81       	ldd	r18, Y+1	; 0x01
 474:	3a 81       	ldd	r19, Y+2	; 0x02
 476:	28 34       	cpi	r18, 0x48	; 72
 478:	31 05       	cpc	r19, r1
 47a:	01 f4       	brne	.+0      	; 0x47c <__vector_24+0xcc>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__vector_24+0xce>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	89 34       	cpi	r24, 0x49	; 73
 484:	91 05       	cpc	r25, r1
 486:	04 f4       	brge	.+0      	; 0x488 <__vector_24+0xd8>
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	3a 81       	ldd	r19, Y+2	; 0x02
 48c:	28 33       	cpi	r18, 0x38	; 56
 48e:	31 05       	cpc	r19, r1
 490:	01 f4       	brne	.+0      	; 0x492 <__vector_24+0xe2>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__vector_24+0xe4>
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	80 34       	cpi	r24, 0x40	; 64
 49a:	91 05       	cpc	r25, r1
 49c:	01 f4       	brne	.+0      	; 0x49e <__vector_24+0xee>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__vector_24+0xf0>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__vector_24+0xf2>
 4a2:	29 81       	ldd	r18, Y+1	; 0x01
 4a4:	3a 81       	ldd	r19, Y+2	; 0x02
 4a6:	28 35       	cpi	r18, 0x58	; 88
 4a8:	31 05       	cpc	r19, r1
 4aa:	01 f4       	brne	.+0      	; 0x4ac <__vector_24+0xfc>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__vector_24+0xfe>
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	80 36       	cpi	r24, 0x60	; 96
 4b4:	91 05       	cpc	r25, r1
 4b6:	01 f4       	brne	.+0      	; 0x4b8 <__vector_24+0x108>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__vector_24+0x10a>
 4ba:	29 81       	ldd	r18, Y+1	; 0x01
 4bc:	3a 81       	ldd	r19, Y+2	; 0x02
 4be:	20 35       	cpi	r18, 0x50	; 80
 4c0:	31 05       	cpc	r19, r1
 4c2:	01 f4       	brne	.+0      	; 0x4c4 <__vector_24+0x114>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__vector_24+0x116>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__vector_24+0x118>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	80 3a       	cpi	r24, 0xA0	; 160
 4ce:	91 05       	cpc	r25, r1
 4d0:	01 f4       	brne	.+0      	; 0x4d2 <__vector_24+0x122>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__vector_24+0x124>
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	3a 81       	ldd	r19, Y+2	; 0x02
 4d8:	21 3a       	cpi	r18, 0xA1	; 161
 4da:	31 05       	cpc	r19, r1
 4dc:	04 f4       	brge	.+0      	; 0x4de <__vector_24+0x12e>
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	80 38       	cpi	r24, 0x80	; 128
 4e4:	91 05       	cpc	r25, r1
 4e6:	01 f4       	brne	.+0      	; 0x4e8 <__vector_24+0x138>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__vector_24+0x13a>
 4ea:	29 81       	ldd	r18, Y+1	; 0x01
 4ec:	3a 81       	ldd	r19, Y+2	; 0x02
 4ee:	21 38       	cpi	r18, 0x81	; 129
 4f0:	31 05       	cpc	r19, r1
 4f2:	04 f4       	brge	.+0      	; 0x4f4 <__vector_24+0x144>
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	80 37       	cpi	r24, 0x70	; 112
 4fa:	91 05       	cpc	r25, r1
 4fc:	01 f4       	brne	.+0      	; 0x4fe <__vector_24+0x14e>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <__vector_24+0x150>
 500:	29 81       	ldd	r18, Y+1	; 0x01
 502:	3a 81       	ldd	r19, Y+2	; 0x02
 504:	28 37       	cpi	r18, 0x78	; 120
 506:	31 05       	cpc	r19, r1
 508:	01 f4       	brne	.+0      	; 0x50a <__vector_24+0x15a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__vector_24+0x15c>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <__vector_24+0x15e>
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	9a 81       	ldd	r25, Y+2	; 0x02
 512:	80 39       	cpi	r24, 0x90	; 144
 514:	91 05       	cpc	r25, r1
 516:	01 f4       	brne	.+0      	; 0x518 <__vector_24+0x168>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__vector_24+0x16a>
 51a:	29 81       	ldd	r18, Y+1	; 0x01
 51c:	3a 81       	ldd	r19, Y+2	; 0x02
 51e:	28 39       	cpi	r18, 0x98	; 152
 520:	31 05       	cpc	r19, r1
 522:	01 f4       	brne	.+0      	; 0x524 <__vector_24+0x174>
 524:	00 c0       	rjmp	.+0      	; 0x526 <__vector_24+0x176>
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	88 38       	cpi	r24, 0x88	; 136
 52c:	91 05       	cpc	r25, r1
 52e:	01 f4       	brne	.+0      	; 0x530 <__vector_24+0x180>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__vector_24+0x182>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__vector_24+0x184>
 534:	29 81       	ldd	r18, Y+1	; 0x01
 536:	3a 81       	ldd	r19, Y+2	; 0x02
 538:	28 3b       	cpi	r18, 0xB8	; 184
 53a:	31 05       	cpc	r19, r1
 53c:	01 f4       	brne	.+0      	; 0x53e <__vector_24+0x18e>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__vector_24+0x190>
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	9a 81       	ldd	r25, Y+2	; 0x02
 544:	89 3b       	cpi	r24, 0xB9	; 185
 546:	91 05       	cpc	r25, r1
 548:	04 f4       	brge	.+0      	; 0x54a <__vector_24+0x19a>
 54a:	29 81       	ldd	r18, Y+1	; 0x01
 54c:	3a 81       	ldd	r19, Y+2	; 0x02
 54e:	28 3a       	cpi	r18, 0xA8	; 168
 550:	31 05       	cpc	r19, r1
 552:	01 f4       	brne	.+0      	; 0x554 <__vector_24+0x1a4>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__vector_24+0x1a6>
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	9a 81       	ldd	r25, Y+2	; 0x02
 55a:	80 3b       	cpi	r24, 0xB0	; 176
 55c:	91 05       	cpc	r25, r1
 55e:	01 f4       	brne	.+0      	; 0x560 <__vector_24+0x1b0>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__vector_24+0x1b2>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__vector_24+0x1b4>
 564:	29 81       	ldd	r18, Y+1	; 0x01
 566:	3a 81       	ldd	r19, Y+2	; 0x02
 568:	28 3c       	cpi	r18, 0xC8	; 200
 56a:	31 05       	cpc	r19, r1
 56c:	01 f4       	brne	.+0      	; 0x56e <__vector_24+0x1be>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__vector_24+0x1c0>
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	9a 81       	ldd	r25, Y+2	; 0x02
 574:	88 3f       	cpi	r24, 0xF8	; 248
 576:	91 05       	cpc	r25, r1
 578:	01 f4       	brne	.+0      	; 0x57a <__vector_24+0x1ca>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__vector_24+0x1cc>
 57c:	29 81       	ldd	r18, Y+1	; 0x01
 57e:	3a 81       	ldd	r19, Y+2	; 0x02
 580:	20 3c       	cpi	r18, 0xC0	; 192
 582:	31 05       	cpc	r19, r1
 584:	01 f4       	brne	.+0      	; 0x586 <__vector_24+0x1d6>
 586:	00 c0       	rjmp	.+0      	; 0x588 <__vector_24+0x1d8>
 588:	00 c0       	rjmp	.+0      	; 0x58a <__vector_24+0x1da>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 58a:	eb eb       	ldi	r30, 0xBB	; 187
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 91 00 00 	lds	r24, 0x0000
 592:	80 83       	st	Z, r24
      twi_reply(1);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <__vector_24+0x1ec>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 59c:	90 91 00 00 	lds	r25, 0x0000
 5a0:	80 91 00 00 	lds	r24, 0x0000
 5a4:	98 17       	cp	r25, r24
 5a6:	00 f4       	brcc	.+0      	; 0x5a8 <__vector_24+0x1f8>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 5a8:	ab eb       	ldi	r26, 0xBB	; 187
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	20 91 00 00 	lds	r18, 0x0000
 5b0:	30 91 00 00 	lds	r19, 0x0000
 5b4:	40 91 00 00 	lds	r20, 0x0000
 5b8:	84 2f       	mov	r24, r20
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	f9 01       	movw	r30, r18
 5be:	e8 0f       	add	r30, r24
 5c0:	f9 1f       	adc	r31, r25
 5c2:	80 81       	ld	r24, Z
 5c4:	8c 93       	st	X, r24
 5c6:	84 2f       	mov	r24, r20
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 00 00 	sts	0x0000, r24
        twi_reply(1);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__vector_24+0x226>
      }else{
        twi_stop();
 5d6:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <__vector_24+0x22c>
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 5dc:	80 e2       	ldi	r24, 0x20	; 32
 5de:	80 93 00 00 	sts	0x0000, r24
      twi_stop();
 5e2:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <__vector_24+0x238>
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 5e8:	80 e3       	ldi	r24, 0x30	; 48
 5ea:	80 93 00 00 	sts	0x0000, r24
      twi_stop();
 5ee:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__vector_24+0x244>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 5f4:	88 e3       	ldi	r24, 0x38	; 56
 5f6:	80 93 00 00 	sts	0x0000, r24
      twi_releaseBus();
 5fa:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__vector_24+0x250>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 600:	20 91 00 00 	lds	r18, 0x0000
 604:	30 91 00 00 	lds	r19, 0x0000
 608:	40 91 00 00 	lds	r20, 0x0000
 60c:	84 2f       	mov	r24, r20
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	d9 01       	movw	r26, r18
 612:	a8 0f       	add	r26, r24
 614:	b9 1f       	adc	r27, r25
 616:	eb eb       	ldi	r30, 0xBB	; 187
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	8c 93       	st	X, r24
 61e:	84 2f       	mov	r24, r20
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 00 00 	sts	0x0000, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 626:	90 91 00 00 	lds	r25, 0x0000
 62a:	80 91 00 00 	lds	r24, 0x0000
 62e:	98 17       	cp	r25, r24
 630:	00 f4       	brcc	.+0      	; 0x632 <__vector_24+0x282>
        twi_reply(1);
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__vector_24+0x28a>
      }else{
        twi_reply(0);
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 640:	00 c0       	rjmp	.+0      	; 0x642 <__vector_24+0x292>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 642:	20 91 00 00 	lds	r18, 0x0000
 646:	30 91 00 00 	lds	r19, 0x0000
 64a:	40 91 00 00 	lds	r20, 0x0000
 64e:	84 2f       	mov	r24, r20
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	d9 01       	movw	r26, r18
 654:	a8 0f       	add	r26, r24
 656:	b9 1f       	adc	r27, r25
 658:	eb eb       	ldi	r30, 0xBB	; 187
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8c 93       	st	X, r24
 660:	84 2f       	mov	r24, r20
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 00 00 	sts	0x0000, r24
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 668:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <__vector_24+0x2be>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	80 93 00 00 	sts	0x0000, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 674:	10 92 00 00 	sts	0x0000, r1
      twi_reply(1);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <__vector_24+0x2d0>
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 680:	80 91 00 00 	lds	r24, 0x0000
 684:	80 32       	cpi	r24, 0x20	; 32
 686:	00 f4       	brcc	.+0      	; 0x688 <__vector_24+0x2d8>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 688:	20 91 00 00 	lds	r18, 0x0000
 68c:	30 91 00 00 	lds	r19, 0x0000
 690:	40 91 00 00 	lds	r20, 0x0000
 694:	84 2f       	mov	r24, r20
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	d9 01       	movw	r26, r18
 69a:	a8 0f       	add	r26, r24
 69c:	b9 1f       	adc	r27, r25
 69e:	eb eb       	ldi	r30, 0xBB	; 187
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	8c 93       	st	X, r24
 6a6:	84 2f       	mov	r24, r20
 6a8:	8f 5f       	subi	r24, 0xFF	; 255
 6aa:	80 93 00 00 	sts	0x0000, r24
        twi_reply(1);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <__vector_24+0x306>
      }else{
        // otherwise nack
        twi_reply(0);
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <__vector_24+0x30e>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 6be:	80 91 00 00 	lds	r24, 0x0000
 6c2:	80 32       	cpi	r24, 0x20	; 32
 6c4:	00 f4       	brcc	.+0      	; 0x6c6 <__vector_24+0x316>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 6c6:	20 91 00 00 	lds	r18, 0x0000
 6ca:	30 91 00 00 	lds	r19, 0x0000
 6ce:	80 91 00 00 	lds	r24, 0x0000
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	e8 0f       	add	r30, r24
 6da:	f9 1f       	adc	r31, r25
 6dc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 6de:	e0 91 00 00 	lds	r30, 0x0000
 6e2:	f0 91 00 00 	lds	r31, 0x0000
 6e6:	40 91 00 00 	lds	r20, 0x0000
 6ea:	50 91 00 00 	lds	r21, 0x0000
 6ee:	80 91 00 00 	lds	r24, 0x0000
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	ca 01       	movw	r24, r20
 6f8:	b9 01       	movw	r22, r18
 6fa:	09 95       	icall
      // ack future responses
      twi_reply(1);
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      // leave slave receiver state
      twi_state = TWI_READY;
 702:	10 92 00 00 	sts	0x0000, r1
 706:	00 c0       	rjmp	.+0      	; 0x708 <__vector_24+0x358>
      break;
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <__vector_24+0x360>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 710:	84 e0       	ldi	r24, 0x04	; 4
 712:	80 93 00 00 	sts	0x0000, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 716:	10 92 00 00 	sts	0x0000, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 71a:	10 92 00 00 	sts	0x0000, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 71e:	e0 91 00 00 	lds	r30, 0x0000
 722:	f0 91 00 00 	lds	r31, 0x0000
 726:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 728:	80 91 00 00 	lds	r24, 0x0000
 72c:	88 23       	and	r24, r24
 72e:	01 f4       	brne	.+0      	; 0x730 <__vector_24+0x380>
        twi_txBufferLength = 1;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 00 00 	sts	0x0000, r24
        twi_txBuffer[0] = 0x00;
 736:	e0 91 00 00 	lds	r30, 0x0000
 73a:	f0 91 00 00 	lds	r31, 0x0000
 73e:	10 82       	st	Z, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 740:	ab eb       	ldi	r26, 0xBB	; 187
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	20 91 00 00 	lds	r18, 0x0000
 748:	30 91 00 00 	lds	r19, 0x0000
 74c:	40 91 00 00 	lds	r20, 0x0000
 750:	84 2f       	mov	r24, r20
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	f9 01       	movw	r30, r18
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	80 81       	ld	r24, Z
 75c:	8c 93       	st	X, r24
 75e:	84 2f       	mov	r24, r20
 760:	8f 5f       	subi	r24, 0xFF	; 255
 762:	80 93 00 00 	sts	0x0000, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 766:	90 91 00 00 	lds	r25, 0x0000
 76a:	80 91 00 00 	lds	r24, 0x0000
 76e:	98 17       	cp	r25, r24
 770:	00 f4       	brcc	.+0      	; 0x772 <__vector_24+0x3c2>
        twi_reply(1);
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 778:	00 c0       	rjmp	.+0      	; 0x77a <__vector_24+0x3ca>
      }else{
        twi_reply(0);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 00 00 	call	0	; 0x0 <twi_init>
 780:	00 c0       	rjmp	.+0      	; 0x782 <__vector_24+0x3d2>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      // leave slave receiver state
      twi_state = TWI_READY;
 788:	10 92 00 00 	sts	0x0000, r1
 78c:	00 c0       	rjmp	.+0      	; 0x78e <__vector_24+0x3de>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 78e:	10 92 00 00 	sts	0x0000, r1
      twi_stop();
 792:	0e 94 00 00 	call	0	; 0x0 <twi_init>
      break;
  }
}
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti
